{"version":3,"file":"static/js/582.efedb68c.chunk.js","mappings":"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","sources":["utils/reportGenerator.js","hooks/useDashboard.js","components/dashboard/DashboardControls.js","components/dashboard/SubjectAveragesChart.js","components/dashboard/KpiCards.js","components/dashboard/DashboardActivityChart.js","components/dashboard/GenerateReportButton.js","components/dashboard/TopicPerformanceList.js","pages/DashboardPage.js"],"sourcesContent":["// src/utils/reportGenerator.js\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { format } from 'date-fns';\nimport { Chart } from 'chart.js';\n\n/**\n * A helper function that temporarily restyles a Chart.js chart for a light-mode PDF,\n * captures it using html2canvas, and then restores its original styles.\n * @param {HTMLElement} element - The DOM element that wraps the chart canvas.\n * @returns {Promise<string|null>} A promise that resolves to a base64 image data URL or null.\n */\nconst captureChartWithLightModeStyles = async (element) => {\n  if (!element) return null;\n  \n  const canvas = element.querySelector('canvas');\n  if (!canvas) {\n    console.error(\"PDF Gen: Could not find a canvas element to capture.\");\n    return null;\n  }\n  \n  const chartInstance = Chart.getChart(canvas);\n  if (!chartInstance) {\n    console.error(\"PDF Gen: Could not get Chart.js instance from the canvas.\");\n    return null;\n  }\n\n  const originalOptions = JSON.parse(JSON.stringify(chartInstance.options));\n  const paperElement = element.querySelector('.MuiPaper-root');\n  const originalPaperBg = paperElement ? paperElement.style.backgroundColor : '';\n\n  try {\n    const lightModeTextColor = '#212121';\n    const lightModeGridColor = '#d1d1d1';\n\n    if (chartInstance.options.plugins.legend) {\n      chartInstance.options.plugins.legend.labels.color = lightModeTextColor;\n    }\n    if (chartInstance.options.plugins.title) {\n      chartInstance.options.plugins.title.color = lightModeTextColor;\n    }\n    if (chartInstance.options.scales.x) {\n      chartInstance.options.scales.x.title.color = lightModeTextColor;\n      chartInstance.options.scales.x.ticks.color = lightModeTextColor;\n      chartInstance.options.scales.x.grid.color = lightModeGridColor;\n    }\n    if (chartInstance.options.scales.y) {\n      chartInstance.options.scales.y.title.color = lightModeTextColor;\n      chartInstance.options.scales.y.ticks.color = lightModeTextColor;\n      chartInstance.options.scales.y.grid.color = lightModeGridColor;\n    }\n    \n    chartInstance.update('none');\n\n    if (paperElement) {\n      paperElement.style.backgroundColor = 'transparent';\n    }\n\n    const capturedCanvas = await html2canvas(element, {\n      scale: 2,\n      useCORS: true,\n      backgroundColor: '#ffffff',\n    });\n\n    return capturedCanvas.toDataURL('image/png');\n\n  } catch (error) {\n    console.error(\"PDF Gen: Error during chart capture:\", error);\n    return null;\n  } finally {\n    chartInstance.options.plugins = originalOptions.plugins;\n    chartInstance.options.scales = originalOptions.scales;\n    chartInstance.update('none');\n    \n    if (paperElement) {\n      paperElement.style.backgroundColor = originalPaperBg;\n    }\n  }\n};\n\n/**\n * A generic capture function for non-chart components that handles restyling for a light-mode PDF.\n * This now includes changing text colors.\n * @param {HTMLElement} element - The DOM element to capture.\n * @returns {Promise<string|null>} A promise that resolves to a base64 image data URL or null.\n */\nconst captureElementAsImage = async (element) => {\n  if (!element) return null;\n  \n  const paperElement = element.querySelector('.MuiPaper-root');\n  const originalPaperBg = paperElement ? paperElement.style.backgroundColor : '';\n  \n  // Find all text elements within the component to change their color\n  const textElements = element.querySelectorAll('.MuiTypography-root, .MuiListItemText-primary, .MuiListItemText-secondary');\n  const originalTextColors = [];\n\n  try {\n    // 1. Temporarily change styles for PDF capture\n    if (paperElement) {\n        paperElement.style.backgroundColor = 'transparent';\n    }\n    textElements.forEach(el => {\n        originalTextColors.push({ element: el, color: el.style.color }); // Store original color\n        el.style.color = '#000000'; // Set to black for the capture\n    });\n\n    // 2. Capture the element\n    const canvas = await html2canvas(element, {\n      scale: 2,\n      useCORS: true,\n      backgroundColor: '#ffffff',\n    });\n    return canvas.toDataURL('image/png');\n  } catch (error) {\n    console.error(\"PDF Gen: Error capturing element:\", error);\n    return null;\n  } finally {\n    // 3. Restore all original styles\n    if (paperElement) {\n        paperElement.style.backgroundColor = originalPaperBg;\n    }\n    originalTextColors.forEach(item => {\n        item.element.style.color = item.color; // Restore original text color\n    });\n  }\n};\n\n/**\n * Generates and triggers the download of a PDF report for the user's dashboard.\n */\nexport const generateDashboardPdfReport = async ({\n  currentUser,\n  overallStats,\n  activityChartElement,\n  subjectAveragesChartElement,\n  topicPerformanceElement,\n  isSubjectSelected,\n  timeFrequencyLabel\n}) => {\n  if (!currentUser) {\n    alert(\"User data not available for report.\");\n    return false;\n  }\n  if (!activityChartElement) {\n    alert(\"Activity Chart element not found. Cannot generate PDF.\");\n    return false;\n  }\n\n  try {\n    const pdf = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    const margin = 15;\n    const contentWidth = pageWidth - 2 * margin;\n    let currentY = margin;\n\n    // --- PDF Header ---\n    pdf.setFontSize(22);\n    pdf.setFont(undefined, 'bold');\n    pdf.text('ReactiQuiz User Analytics Report', pageWidth / 2, currentY, { align: 'center' });\n    currentY += 10;\n    pdf.setFontSize(14);\n    pdf.setFont(undefined, 'normal');\n    pdf.text(`User: ${currentUser.name || 'N/A'}`, margin, currentY);\n    currentY += 7;\n    pdf.text(`Report Generated: ${format(new Date(), 'MMM d, yyyy HH:mm')}`, margin, currentY);\n    currentY += 7;\n    pdf.text(`Time Period: ${timeFrequencyLabel}`, margin, currentY);\n    currentY += 10;\n\n    // --- Overall Stats ---\n    pdf.setFontSize(16);\n    pdf.setFont(undefined, 'bold');\n    pdf.text('Overall Performance', margin, currentY);\n    currentY += 7;\n    pdf.setFontSize(12);\n    pdf.setFont(undefined, 'normal');\n    pdf.text(`- Total Quizzes Solved: ${overallStats.totalQuizzes}`, margin + 5, currentY);\n    currentY += 6;\n    pdf.text(`- Overall Average Score: ${overallStats.overallAverageScore}%`, margin + 5, currentY);\n    currentY += 10;\n\n    // --- Add Topic Performance if a subject is selected ---\n    if (isSubjectSelected && topicPerformanceElement) {\n      if (currentY + 7 > pageHeight - margin) { pdf.addPage(); currentY = margin; }\n      \n      const topicImgData = await captureElementAsImage(topicPerformanceElement);\n      if (topicImgData) {\n        const topicImgProps = pdf.getImageProperties(topicImgData);\n        let topicImgHeight = (topicImgProps.height * contentWidth) / topicImgProps.width;\n        if (topicImgHeight > pageHeight - margin - currentY - 5) { topicImgHeight = pageHeight - margin - currentY - 5; }\n        if (currentY + topicImgHeight > pageHeight - margin) { pdf.addPage(); currentY = margin; }\n        pdf.addImage(topicImgData, 'PNG', margin, currentY, contentWidth, topicImgHeight);\n        currentY += topicImgHeight + 10;\n      }\n    }\n\n    // --- Add Activity Chart (always) ---\n    if (currentY + 7 > pageHeight - margin) { pdf.addPage(); currentY = margin; }\n    pdf.setFontSize(16);\n    pdf.setFont(undefined, 'bold');\n    pdf.text('Quiz Activity Overview', margin, currentY);\n    currentY += 7;\n    const activityImgData = await captureChartWithLightModeStyles(activityChartElement);\n    if (activityImgData) {\n      const activityImgProps = pdf.getImageProperties(activityImgData);\n      let activityImgHeight = (activityImgProps.height * contentWidth) / activityImgProps.width;\n      if (activityImgHeight > pageHeight - margin - currentY - 5) { activityImgHeight = pageHeight - margin - currentY - 5; }\n      if (currentY + activityImgHeight > pageHeight - margin) {\n          pdf.addPage();\n          currentY = margin;\n          pdf.setFontSize(16);\n          pdf.setFont(undefined, 'bold');\n          pdf.text('Quiz Activity Overview (Continued)', margin, currentY);\n          currentY += 7;\n      }\n      pdf.addImage(activityImgData, 'PNG', margin, currentY, contentWidth, activityImgHeight);\n      currentY += activityImgHeight + 10;\n    } else {\n        pdf.setFontSize(10);\n        pdf.setFont(undefined, 'italic');\n        pdf.text('- Could not render activity chart -', margin, currentY);\n        currentY += 10;\n    }\n\n    // --- Add Subject Averages Chart ONLY if NO specific subject is selected ---\n    if (!isSubjectSelected) {\n      if (currentY + 7 > pageHeight - margin) { pdf.addPage(); currentY = margin; }\n      pdf.setFontSize(16);\n      pdf.setFont(undefined, 'bold');\n      pdf.text('Average Score by Subject', margin, currentY);\n      currentY += 7;\n\n      const subjectImgData = await captureChartWithLightModeStyles(subjectAveragesChartElement);\n      if (subjectImgData) {\n        const subjectImgProps = pdf.getImageProperties(subjectImgData);\n        let subjectImgHeight = (subjectImgProps.height * contentWidth) / subjectImgProps.width;\n        if (subjectImgHeight > pageHeight - margin - currentY - 5) { subjectImgHeight = pageHeight - margin - currentY - 5; }\n        if (currentY + subjectImgHeight > pageHeight - margin) {\n            pdf.addPage();\n            currentY = margin;\n            pdf.setFontSize(16);\n            pdf.setFont(undefined, 'bold');\n            pdf.text('Average Score by Subject (Continued)', margin, currentY);\n            currentY += 7;\n        }\n        pdf.addImage(subjectImgData, 'PNG', margin, currentY, contentWidth, subjectImgHeight);\n      } else {\n          pdf.setFontSize(10);\n          pdf.setFont(undefined, 'italic');\n          pdf.text('- Subject averages chart is not applicable for this view or failed to render. -', margin, currentY);\n      }\n    }\n    \n    pdf.save(`ReactiQuiz_Report_${currentUser.name}_${format(new Date(), 'yyyyMMdd')}.pdf`);\n    return true;\n  } catch (error) {\n    console.error(\"Error generating PDF report:\", error);\n    alert(\"Failed to generate PDF report. See console for details.\");\n    return false;\n  }\n};","// src/hooks/useDashboard.js\nimport { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { subDays, format, startOfDay, parseISO, isValid, eachDayOfInterval, min } from 'date-fns';\nimport { alpha } from '@mui/material/styles';\nimport apiClient from '../api/axiosInstance';\nimport { generateDashboardPdfReport } from '../utils/reportGenerator';\n\nconst timeFrequencyOptions = [\n  { value: 7, label: 'Last 7 Days' },\n  { value: 30, label: 'Last 30 Days' },\n  { value: 90, label: 'Last 90 Days' },\n  { value: 365, label: 'Last Year' },\n  { value: 'all', label: 'All Time' },\n];\n\nexport const useDashboard = (currentUser) => {\n  const theme = useTheme();\n\n  // --- State for Data Fetching ---\n  const [userResults, setUserResults] = useState([]);\n  const [allSubjects, setAllSubjects] = useState([]);\n  const [allTopics, setAllTopics] = useState([]);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [error, setError] = useState('');\n  const topicPerformanceRef = useRef(null);\n\n  // --- State for UI Controls ---\n  const [timeFrequency, setTimeFrequency] = useState(30);\n  const [selectedSubject, setSelectedSubject] = useState('all');\n  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);\n\n  // --- Refs for PDF Generation ---\n  const activityChartRef = useRef(null);\n  const subjectAveragesChartRef = useRef(null);\n\n  // --- Event Handlers ---\n  const handleTimeFrequencyChange = (event) => setTimeFrequency(event.target.value);\n  const handleSubjectChange = (event) => setSelectedSubject(event.target.value);\n\n  const handleGenerateReport = async () => {\n    setIsGeneratingPdf(true);\n    const timeFreqOption = timeFrequencyOptions.find(opt => opt.value === timeFrequency);\n\n    await generateDashboardPdfReport({\n      currentUser: currentUser,\n      overallStats: {\n        totalQuizzes: processedStats.totalQuizzes,\n        overallAverageScore: processedStats.overallAverageScore,\n      },\n      activityChartElement: activityChartRef.current,\n      subjectAveragesChartElement: subjectAveragesChartRef.current,\n      topicPerformanceElement: topicPerformanceRef.current, // <-- PASS THE NEW REF'S CURRENT VALUE\n      isSubjectSelected: selectedSubject !== 'all', // <-- Pass a flag\n      timeFrequencyLabel: timeFreqOption ? timeFreqOption.label : String(timeFrequency),\n    });\n    setIsGeneratingPdf(false);\n  };\n\n  // --- Data Fetching Logic ---\n  const fetchDashboardData = useCallback(async () => {\n    if (!currentUser || !currentUser.id) { setIsLoadingData(false); return; }\n    setIsLoadingData(true);\n    setError('');\n\n    try {\n      // Fetch all required data concurrently\n      const [resultsRes, subjectsRes, topicsRes] = await Promise.all([\n        apiClient.get(`/api/results?userId=${currentUser.id}`, { headers: { Authorization: `Bearer ${currentUser.token}` } }),\n        apiClient.get('/api/subjects'),\n        apiClient.get('/api/topics') // Assuming a general /api/topics endpoint exists\n      ]);\n\n      setUserResults((resultsRes.data || []).map(r => ({ ...r, percentage: parseFloat(r.percentage) })).filter(r => !isNaN(r.percentage)));\n      setAllSubjects(subjectsRes.data || []);\n      setAllTopics(topicsRes.data || []);\n\n    } catch (err) {\n      setError(`Failed to load dashboard data: ${err.response?.data?.message || err.message}`);\n    } finally {\n      setIsLoadingData(false);\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // --- Memoized Data Processing (Heavily Updated) ---\n  const processedStats = useMemo(() => {\n    if (!userResults || allSubjects.length === 0) {\n      return { filteredResults: [], totalQuizzes: 0, overallAverageScore: 0, subjectStats: {}, activityData: { labels: [], datasets: [] }, subjectAverageScoreChartData: { labels: [], datasets: [] }, bestSubject: null, weakestSubject: null, topicPerformance: [] };\n    }\n\n    // 1. Filter results by TIME period\n    const today = startOfDay(new Date());\n    const startDate = timeFrequency === 'all'\n      ? startOfDay(min(userResults.map(r => parseISO(r.timestamp)).filter(isValid)))\n      : startOfDay(subDays(today, Number(timeFrequency) - 1));\n\n    let resultsInTimePeriod = userResults.filter(r => {\n      const resultDate = parseISO(r.timestamp);\n      return isValid(resultDate) && resultDate >= startDate && resultDate <= today;\n    });\n\n    // 2. Filter results by SUBJECT (if selected)\n    const filteredResults = selectedSubject === 'all'\n      ? resultsInTimePeriod\n      : resultsInTimePeriod.filter(r => r.subject?.toLowerCase() === selectedSubject.toLowerCase());\n\n    // 3. Calculate KPIs from the time-filtered (but not subject-filtered) results\n    const subjectStats = {};\n    allSubjects.forEach(subj => {\n      const keyLower = subj.subjectKey.toLowerCase();\n      const results = resultsInTimePeriod.filter(r => r.subject?.toLowerCase() === keyLower);\n      if (results.length > 0) {\n        const percentages = results.map(r => r.percentage).filter(p => !isNaN(p));\n        subjectStats[keyLower] = {\n          count: results.length,\n          average: percentages.length > 0 ? Math.round(percentages.reduce((a, b) => a + b, 0) / percentages.length) : 0,\n          name: subj.name, color: subj.accentColor || theme.palette.grey[500]\n        };\n      }\n    });\n\n    let bestSubject = null, weakestSubject = null;\n    const subjectsWithStats = Object.values(subjectStats);\n    if (subjectsWithStats.length > 0) {\n      bestSubject = subjectsWithStats.reduce((max, subj) => (subj.average > max.average ? subj : max), subjectsWithStats[0]);\n      weakestSubject = subjectsWithStats.reduce((min, subj) => (subj.average < min.average ? subj : min), subjectsWithStats[0]);\n      if (bestSubject === weakestSubject && subjectsWithStats.length > 1) weakestSubject = null;\n    }\n\n\n    // 4. Calculate Topic-Level performance for the *currently selected subject*\n    let topicPerformance = [];\n    if (selectedSubject !== 'all' && allTopics.length > 0) {\n      const topicsForSelectedSubject = allTopics.filter(t => t.subject?.toLowerCase() === selectedSubject.toLowerCase());\n      topicPerformance = topicsForSelectedSubject.map(topic => {\n        const topicResults = filteredResults.filter(r => r.topicId === topic.id);\n        if (topicResults.length > 0) {\n          const avgScore = Math.round(topicResults.reduce((acc, r) => acc + r.percentage, 0) / topicResults.length);\n          return { id: topic.id, name: topic.name, count: topicResults.length, average: avgScore };\n        }\n        return null;\n      }).filter(Boolean).sort((a, b) => b.average - a.average); // Sort by best-performing\n    }\n\n    // 5. Generate Chart data based on the *currently filtered* results\n    const totalQuizzes = filteredResults.length;\n    const overallAverageScore = totalQuizzes > 0 ? Math.round(filteredResults.reduce((acc, r) => acc + r.percentage, 0) / totalQuizzes) : 0;\n    const activityCounts = {};\n    filteredResults.forEach(r => {\n      const dayKey = format(startOfDay(parseISO(r.timestamp)), 'yyyy-MM-dd');\n      activityCounts[dayKey] = (activityCounts[dayKey] || 0) + 1;\n    });\n    const chartLabels = eachDayOfInterval({ start: startDate, end: today }).map(d => format(d, 'yyyy-MM-dd'));\n    const activityData = {\n      labels: chartLabels,\n      datasets: [{\n        label: 'Quizzes Taken', data: chartLabels.map(day => activityCounts[day] || 0), fill: true,\n        backgroundColor: alpha(theme.palette.primary.main, 0.3), borderColor: theme.palette.primary.main, tension: 0.1,\n      }],\n    };\n\n    const subjectAverageScoreChartData = {\n      labels: Object.values(subjectStats).map(s => s.name),\n      datasets: [{\n        label: 'Average Score (%)', data: Object.values(subjectStats).map(s => s.average),\n        backgroundColor: Object.values(subjectStats).map(s => alpha(s.color, 0.7)),\n        borderColor: Object.values(subjectStats).map(s => s.color), borderWidth: 1,\n      }],\n    };\n\n\n    return { filteredResults, totalQuizzes, overallAverageScore, subjectStats, activityData, subjectAverageScoreChartData, bestSubject, weakestSubject, topicPerformance };\n\n  }, [userResults, allSubjects, allTopics, timeFrequency, selectedSubject, theme]);\n\n  // Chart options remain the same...\n  const subjectAverageScoreChartOptions = useMemo(() => ({\n    indexAxis: 'y', responsive: true, maintainAspectRatio: false,\n    plugins: { legend: { display: false }, title: { display: false }, tooltip: { callbacks: { label: (c) => `Average: ${c.parsed.x}%` } } },\n    scales: {\n      x: { beginAtZero: true, max: 100, ticks: { color: theme.palette.text.secondary, callback: (v) => v + \"%\" }, grid: { color: alpha(theme.palette.text.secondary, 0.1) }, title: { display: true, text: 'Average Score (%)', color: theme.palette.text.secondary } },\n      y: { ticks: { color: theme.palette.text.secondary }, grid: { display: false } }\n    }\n  }), [theme.palette.text.secondary]);\n\n  // --- START OF FIX ---\n  // Add 'handleSubjectChange' to the return object\n  return {\n    userResults,\n    allSubjects,\n    isLoadingData,\n    error,\n    timeFrequency,\n    selectedSubject,\n    isGeneratingPdf,\n    processedStats,\n    subjectAverageScoreChartOptions,\n    activityChartRef,\n    topicPerformanceRef,\n    subjectAveragesChartRef,\n    fetchDashboardData,\n    handleTimeFrequencyChange,\n    handleSubjectChange, // <-- THIS IS THE FIX\n    handleGenerateReport,\n  };\n  // --- END OF FIX ---\n};","// src/components/dashboard/DashboardControls.js\nimport React from 'react';\nimport { Paper, Box, Typography, FormControl, InputLabel, Select, MenuItem, Grid } from '@mui/material';\n\nconst timeFrequencyOptions = [\n    { value: 7, label: 'Last 7 Days' },\n    { value: 30, label: 'Last 30 Days' },\n    { value: 90, label: 'Last 90 Days' },\n    { value: 365, label: 'Last Year' },\n    { value: 'all', label: 'All Time' },\n];\n\nfunction DashboardControls({ timeFrequency, onTimeFrequencyChange, allSubjects, selectedSubject, onSubjectChange }) {\n    // --- START OF FIX ---\n    // Ensure the value for the Select component is always valid.\n    const validTimeFrequency = timeFrequencyOptions.some(opt => opt.value === timeFrequency) ? timeFrequency : 30;\n    // --- END OF FIX ---\n\n    return (\n        <Paper elevation={3} sx={{ p: { xs: 1.5, sm: 2 }, mb: 3 }}>\n            <Grid\n                container\n                spacing={{\n                    xs: '1%',\n                    sm: '1%',\n                    md: '1%',\n                    lg: '1%',\n                    xl: '1%'\n                }}>\n                <Grid\n                    item\n                    width={{\n                        xs: '100%',\n                        sm: '100%',\n                        md: '49%',\n                        lg: '49%',\n                        xl: '49%'\n                    }}>\n                    <Typography variant=\"h6\" color=\"text.primary\" sx={{ mb: 2, fontSize: { xs: '1.1rem', sm: '1.25rem' } }}>\n                        Dashboard Filters\n                    </Typography>\n                </Grid>\n                {/* Use a Grid container to manage the layout of the dropdowns */}\n                <Grid\n                    item\n                    width={{\n                        xs: '49.5%',\n                        sm: '49.5%',\n                        md: '24.5%',\n                        lg: '24.5%',\n                        xl: '24.5%'\n                    }}>\n                    <FormControl size=\"small\" fullWidth>\n                        <InputLabel id=\"time-freq-main-label\">Time Period</InputLabel>\n                        <Select\n                            labelId=\"time-freq-main-label\"\n                            value={validTimeFrequency} // Use the validated value\n                            label=\"Time Period\"\n                            onChange={onTimeFrequencyChange}\n                        >\n                            {timeFrequencyOptions.map(opt => <MenuItem key={opt.value} value={opt.value}>{opt.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid\n                    item\n                    width={{\n                        xs: '49.5%',\n                        sm: '49.5%',\n                        md: '24.5%',\n                        lg: '24.5%',\n                        xl: '24.5%'\n                    }}>\n                    <FormControl size=\"small\" fullWidth>\n                        <InputLabel id=\"subject-filter-label\">Subject</InputLabel>\n                        <Select\n                            labelId=\"subject-filter-label\"\n                            value={selectedSubject}\n                            label=\"Subject\"\n                            onChange={onSubjectChange}\n                            disabled={!allSubjects || allSubjects.length === 0}\n                        >\n                            <MenuItem value=\"all\">All Subjects</MenuItem>\n                            {allSubjects.map(subj => <MenuItem key={subj.subjectKey} value={subj.subjectKey}>{subj.name}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nexport default DashboardControls;","// src/components/dashboard/SubjectAveragesChart.js\nimport React, { forwardRef } from 'react'; // <-- 1. Import forwardRef\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { Bar } from 'react-chartjs-2';\n\n// 2. Wrap the component definition in forwardRef\nconst SubjectAveragesChart = forwardRef(({ chartData, chartOptions }, ref) => {\n  const theme = useTheme();\n\n  return (\n    // 3. Attach the forwarded ref to the root Paper element\n    <Paper ref={ref} elevation={3} sx={{ p: {xs:1, sm: 2}, mt: 3, backgroundColor: theme.palette.background.paper }}>\n      <Typography variant=\"h6\" sx={{color: theme.palette.text.primary, ml: {xs:1, sm:0}, mb: 2}}>\n        Average Score by Subject\n      </Typography>\n      <Box sx={{ height: `${Math.max(300, (chartData?.labels?.length || 0) * 40)}px`, width: '100%' }}>\n        {chartData && chartData.labels && chartData.labels.length > 0 ? (\n          <Bar options={chartOptions} data={chartData} />\n        ) : (\n          <Typography sx={{textAlign: 'center', color: theme.palette.text.secondary, pt:5}}>\n            No subject data with solved quizzes for the selected period.\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n});\n\nexport default SubjectAveragesChart;","// src/components/dashboard/KpiCards.js\r\nimport React from 'react';\r\nimport { Paper, Typography, useTheme, Box } from '@mui/material';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\r\n\r\n// This component now represents a SINGLE KPI card.\r\nfunction KpiCard({ title, subject, icon, color }) {\r\n    return (\r\n        <Paper sx={{ p: 2, textAlign: 'center', height: '100%', borderTop: `4px solid ${color}` }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 1, mb: 0.5 }}>\r\n                {icon}\r\n                <Typography variant=\"h6\" color=\"text.secondary\" sx={{fontSize: {xs: '1rem', sm: '1.125rem'}}}>{title}</Typography>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{ color: color, fontWeight: 'bold', fontSize: {xs: '1.5rem', sm: '2rem'} }}>\r\n                {subject ? subject.name : 'N/A'}\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.primary\">\r\n                {subject ? `${subject.average}% avg` : '-'}\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                    {subject ? ` over ${subject.count} quiz(zes)` : ''}\r\n                </Typography>\r\n            </Typography>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// --- START OF FIX ---\r\n// This component is now just a wrapper that decides which single card to show.\r\n// We rename it to be more descriptive.\r\nfunction KpiDisplay({ bestSubject, weakestSubject }) {\r\n    const theme = useTheme();\r\n\r\n    if (bestSubject) {\r\n        return (\r\n            <KpiCard\r\n                title=\"Best Subject\"\r\n                subject={bestSubject}\r\n                icon={<TrendingUpIcon sx={{ color: theme.palette.success.main, fontSize: '2rem' }} />}\r\n                color={theme.palette.success.main}\r\n            />\r\n        );\r\n    }\r\n\r\n    if (weakestSubject) {\r\n        return (\r\n            <KpiCard\r\n                title=\"Needs Focus\"\r\n                subject={weakestSubject}\r\n                icon={<TrendingDownIcon sx={{ color: theme.palette.error.main, fontSize: '2rem' }} />}\r\n                color={theme.palette.error.main}\r\n            />\r\n        );\r\n    }\r\n    \r\n    // Return null if no props are provided, though this shouldn't happen with the new parent logic.\r\n    return null;\r\n}\r\n// --- END OF FIX ---\r\n\r\nexport default KpiDisplay; // <-- Export the new wrapper component","// src/components/dashboard/DashboardActivityChart.js\nimport React, { forwardRef } from 'react'; // <-- 1. Import forwardRef\nimport { Box, Typography, Paper, useTheme } from '@mui/material';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { parseISO, format, isValid } from 'date-fns';\nimport { alpha } from '@mui/material/styles';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale);\n\n// 2. Wrap the component definition in forwardRef\nconst DashboardActivityChart = forwardRef(({ activityData, timeFrequency }, ref) => {\n  const theme = useTheme();\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: { display: true, position: 'top', labels: { color: theme.palette.text.primary } },\n      title: { display: false },\n      tooltip: {\n        callbacks: {\n            title: function(context) {\n                const date = parseISO(context[0].label);\n                return isValid(date) ? format(date, 'PPP') : context[0].label;\n            }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: timeFrequency === 7 ? 'day' : (timeFrequency === 30 ? 'day' : (timeFrequency === 90 ? 'week' : 'month')),\n          tooltipFormat: 'PPP',\n           displayFormats: { day: 'MMM d', week: 'MMM d, yy', month: 'MMM yyyy' }\n        },\n        ticks: { color: theme.palette.text.secondary, maxRotation: 0, autoSkipPadding: 10 },\n        grid: { color: alpha(theme.palette.text.secondary, 0.1) }\n      },\n      y: {\n        beginAtZero: true,\n        ticks: { color: theme.palette.text.secondary, stepSize: 1 },\n        grid: { color: alpha(theme.palette.text.secondary, 0.1) },\n        title: { display: true, text: 'Number of Quizzes', color: theme.palette.text.secondary}\n      }\n    },\n    interaction: { intersect: false, mode: 'index' },\n  };\n\n  return (\n    // 3. Attach the forwarded ref to the root Paper element\n    <Paper ref={ref} elevation={3} sx={{ p: {xs: 1, sm: 2}, mt: 3, backgroundColor: theme.palette.background.paper }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2, flexWrap: 'wrap' }}>\n        <Typography variant=\"h6\" sx={{color: theme.palette.text.primary, ml: {xs:1, sm:0}}}>Activity Overview</Typography>\n      </Box>\n      <Box sx={{ height: { xs: '300px', sm: '350px', md: '400px' }, width: '100%' }}>\n        {activityData && activityData.labels && activityData.labels.length > 0 ? (\n          <Line options={chartOptions} data={activityData} />\n        ) : (\n          <Typography sx={{textAlign: 'center', color: theme.palette.text.secondary, pt: 5}}>No quiz activity for the selected period.</Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n});\n\nexport default DashboardActivityChart;","// src/components/dashboard/GenerateReportButton.js\nimport React from 'react';\nimport { Button, Box } from '@mui/material';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\n\nfunction GenerateReportButton({ onGenerate, isLoading, accentColor }) {\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\" // Or use accentColor logic\n        startIcon={<PictureAsPdfIcon />}\n        onClick={onGenerate}\n        disabled={isLoading}\n        sx={{\n          backgroundColor: accentColor,\n          '&:hover': {\n            backgroundColor: theme => theme.palette.augmentColor({ color: { main: accentColor } }).dark\n          },\n          minWidth: '200px',\n          py: 1.5\n        }}\n      >\n        {isLoading ? 'Generating PDF...' : 'Download Report PDF'}\n      </Button>\n    </Box>\n  );\n}\n\nexport default GenerateReportButton;","// src/components/dashboard/TopicPerformanceList.js\r\nimport React from 'react';\r\nimport { Box, Typography, Paper, List, ListItem, ListItemText, Divider, LinearProgress, useTheme } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\n\r\nfunction TopicPerformanceList({ topics, subjectName }) {\r\n    const theme = useTheme();\r\n\r\n    if (!topics || topics.length === 0) {\r\n        return (\r\n            <Paper elevation={3} sx={{ p: 3, mt: 3, textAlign: 'center' }}>\r\n                <Typography color=\"text.secondary\">\r\n                    No quizzes taken for any specific topic in {subjectName} during this period.\r\n                </Typography>\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{ p: { xs: 1.5, sm: 2.5 }, mt: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>Topic Performance in {subjectName}</Typography>\r\n            <List>\r\n                {topics.map((topic, index) => (\r\n                    <React.Fragment key={topic.id}>\r\n                        <ListItem>\r\n                            <ListItemText\r\n                                primary={topic.name}\r\n                                secondary={`${topic.count} quiz(zes) taken`}\r\n                                sx={{ flexBasis: '60%' }}\r\n                            />\r\n                            <Box sx={{ width: '100%', flexBasis: '40%', ml: 2 }}>\r\n                                <Typography variant=\"body2\" sx={{ textAlign: 'right', fontWeight: 'bold' }}>\r\n                                    {topic.average}%\r\n                                </Typography>\r\n                                <LinearProgress\r\n                                    variant=\"determinate\"\r\n                                    value={topic.average}\r\n                                    sx={{\r\n                                        height: 8, borderRadius: 4,\r\n                                        backgroundColor: alpha(theme.palette.grey[500], 0.2),\r\n                                        '& .MuiLinearProgress-bar': {\r\n                                            backgroundColor: theme.palette.info.main,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Box>\r\n                        </ListItem>\r\n                        {index < topics.length - 1 && <Divider component=\"li\" />}\r\n                    </React.Fragment>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TopicPerformanceList;","// src/pages/DashboardPage.js\nimport { Box, Typography, Paper, CircularProgress, Alert, useTheme, Grid, Button } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, LineElement, TimeScale, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\nimport { useAuth } from '../contexts/AuthContext';\nimport { useDashboard } from '../hooks/useDashboard';\n\nimport DashboardControls from '../components/dashboard/DashboardControls';\nimport OverallStatsCards from '../components/dashboard/OverallStatsCards';\nimport SubjectAveragesChart from '../components/dashboard/SubjectAveragesChart';\nimport KpiCards from '../components/dashboard/KpiCards';\nimport KpiDisplay from '../components/dashboard/KpiCards';\nimport DashboardActivityChart from '../components/dashboard/DashboardActivityChart';\nimport SubjectPerformanceGrid from '../components/dashboard/SubjectPerformanceGrid';\nimport GenerateReportButton from '../components/dashboard/GenerateReportButton';\nimport TopicPerformanceList from '../components/dashboard/TopicPerformanceList';\n\nconst offscreenStyle = {\n  position: 'absolute',\n  top: '-9999px',\n  left: '-9999px',\n  // Give it a defined size so html2canvas can render it properly\n  width: '1000px',\n  height: '600px',\n};\n\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, TimeScale, Title, Tooltip, Legend);\n\nfunction DashboardPage() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { currentUser, isLoadingAuth } = useAuth();\n  const DASHBOARD_ACCENT_COLOR = theme.palette.dashboardAccent?.main || theme.palette.grey[700];\n\n  const {\n    userResults,\n    allSubjects,\n    isLoadingData,\n    error,\n    timeFrequency,\n    isGeneratingPdf,\n    processedStats,\n    subjectAverageScoreChartOptions,\n    activityChartRef,\n    topicPerformanceRef,\n    subjectAveragesChartRef,\n    fetchDashboardData,\n    handleTimeFrequencyChange,\n    handleGenerateReport,\n    handleSubjectChange,\n    selectedSubject,\n  } = useDashboard(currentUser);\n\n  if (isLoadingAuth) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"70vh\">\n        <CircularProgress sx={{ color: DASHBOARD_ACCENT_COLOR }} /> <Typography sx={{ ml: 2 }}>Authenticating...</Typography>\n      </Box>\n    );\n  }\n\n  if (!currentUser) {\n    return (\n      <Paper sx={{ p: 3, textAlign: 'center', mt: 4, mx: 'auto', maxWidth: '600px', borderTop: `4px solid ${DASHBOARD_ACCENT_COLOR}` }}>\n        <Typography variant=\"h6\">Please log in to view your dashboard.</Typography>\n        <Button variant=\"contained\" onClick={() => navigate('/login')} sx={{ mt: 2, backgroundColor: DASHBOARD_ACCENT_COLOR }}>\n          Login / Register\n        </Button>\n      </Paper>\n    );\n  }\n\n  if (isLoadingData) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"70vh\">\n        <CircularProgress sx={{ color: DASHBOARD_ACCENT_COLOR }} /> <Typography sx={{ ml: 2 }}>Loading Dashboard Data...</Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ py: 2, px: { xs: 1, sm: 2 } }}>\n        <Typography variant=\"h4\" gutterBottom sx={{ color: DASHBOARD_ACCENT_COLOR, fontWeight: 'bold', mb: 1, textAlign: 'center' }}>My Dashboard</Typography>\n        <Alert severity=\"error\" sx={{ m: 2 }}>{error}</Alert>\n        <Button onClick={fetchDashboardData} variant=\"outlined\" sx={{ display: 'block', mx: 'auto' }}>Retry Loading Data</Button>\n      </Box>\n    );\n  }\n\n  if (userResults.length === 0 && !isLoadingData && !error) {\n    return (\n      <Box sx={{ py: 2, px: { xs: 1, sm: 2 }, textAlign: 'center' }}>\n        <Typography variant=\"h4\" gutterBottom sx={{ color: DASHBOARD_ACCENT_COLOR, fontWeight: 'bold', mb: 3 }}>My Dashboard</Typography>\n        <DashboardControls timeFrequency={timeFrequency} onTimeFrequencyChange={handleTimeFrequencyChange} />\n        <Paper sx={{ p: 3, mt: 2, mx: 'auto', maxWidth: '600px' }}>\n          <Typography variant=\"h6\">Welcome, {currentUser.name}!</Typography>\n          <Typography sx={{ my: 2 }}>You haven't taken any quizzes yet. Start a quiz to see your progress here!</Typography>\n          <Button variant=\"contained\" onClick={() => navigate('/subjects')} sx={{ backgroundColor: DASHBOARD_ACCENT_COLOR }}>\n            Explore Quizzes\n          </Button>\n        </Paper>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ py: { xs: 1, sm: 2 }, px: { xs: 1, sm: 2 }, width: '100%' }}>\n      <DashboardControls\n        timeFrequency={timeFrequency}\n        onTimeFrequencyChange={handleTimeFrequencyChange}\n        allSubjects={allSubjects}\n        selectedSubject={selectedSubject}\n        onSubjectChange={handleSubjectChange}\n      />\n\n      {/* --- START OF UNIFIED GRID LAYOUT --- */}\n      <Grid container spacing={{\n        xs: '1%',\n        sm: '1%',\n        md: '0.667%',\n        lg: '0.667%',\n        xl: '0.667%'\n      }} sx={{ mb: 3 }}>\n        <Grid item\n          width={{\n            xs: '49.5%',\n            sm: '49.5%',\n            md: '24.5%',\n            lg: '24.5%',\n            xl: '24.5%'\n          }}>\n          <Paper sx={{ p: { xs: 2, sm: 2.5 }, textAlign: 'center', height: '100%', borderTop: `4px solid ${DASHBOARD_ACCENT_COLOR}` }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" sx={{ fontSize: { xs: '1rem', sm: '1.125rem' } }}>\n              Total Quizzes Solved\n            </Typography>\n            <Typography variant=\"h3\" sx={{ color: DASHBOARD_ACCENT_COLOR, fontWeight: 'bold', fontSize: { xs: '2rem', sm: '2.5rem' } }}>\n              {processedStats.totalQuizzes}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {selectedSubject !== 'all' ? '(in selected filter)' : '(in selected period)'}\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item\n          width={{\n            xs: '49.5%',\n            sm: '49.5%',\n            md: '24.5%',\n            lg: '24.5%',\n            xl: '24.5%'\n          }}\n        >\n          <Paper sx={{ p: { xs: 2, sm: 2.5 }, textAlign: 'center', height: '100%', borderTop: `4px solid ${DASHBOARD_ACCENT_COLOR}` }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" sx={{ fontSize: { xs: '1rem', sm: '1.125rem' } }}>\n              Overall Average Score\n            </Typography>\n            <Typography variant=\"h3\" sx={{ color: DASHBOARD_ACCENT_COLOR, fontWeight: 'bold', fontSize: { xs: '2rem', sm: '2.5rem' } }}>\n              {processedStats.overallAverageScore}%\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {selectedSubject !== 'all' ? '(in selected filter)' : '(in selected period)'}\n            </Typography>\n          </Paper>\n        </Grid>\n\n        {/* Conditionally render KPI cards in the same grid. Each gets its own Grid item. */}\n        {selectedSubject === 'all' && (\n          <>\n            <Grid item\n              width={{\n                xs: '49.5%',\n                sm: '49.5%',\n                md: '24.5%',\n                lg: '24.5%',\n                xl: '24.5%'\n              }}\n              mt={{ xs: 2, sm: 2, md: 0, lg: 0, xl: 0 }}>\n              <KpiDisplay bestSubject={processedStats.bestSubject} />\n            </Grid>\n            <Grid item\n              width={{\n                xs: '49.5%',\n                sm: '49.5%',\n                md: '24.5%',\n                lg: '24.5%',\n                xl: '24.5%'\n              }}\n              mt={{ xs: 2, sm: 2, md: 0, lg: 0, xl: 0 }}>\n              <KpiDisplay weakestSubject={processedStats.weakestSubject} />\n            </Grid>\n          </>\n        )}\n      </Grid>\n      {/* --- END OF UNIFIED GRID LAYOUT --- */}\n\n      {/* Topic list is not in the grid, it's a full-width item */}\n      <Box ref={topicPerformanceRef}>\n        {selectedSubject !== 'all' && (\n          <TopicPerformanceList\n            topics={processedStats.topicPerformance}\n            subjectName={allSubjects.find(s => s.subjectKey === selectedSubject)?.name || ''}\n          />\n        )}\n      </Box>\n\n      {/* The component with the ref is ALWAYS rendered. We just hide it with CSS. */}\n      <Box ref={activityChartRef}>\n        <DashboardActivityChart\n          activityData={processedStats.activityData}\n          timeFrequency={timeFrequency}\n        />\n      </Box>\n\n      {/* Same fix for the second chart: always render the Box, hide with CSS. */}\n      <Box ref={subjectAveragesChartRef} sx={selectedSubject === 'all' ? {} : offscreenStyle}>\n        <SubjectAveragesChart\n          chartData={processedStats.subjectAverageScoreChartData}\n          chartOptions={subjectAverageScoreChartOptions}\n        />\n      </Box>\n\n      <GenerateReportButton\n        onGenerate={handleGenerateReport}\n        isLoading={isGeneratingPdf}\n        accentColor={DASHBOARD_ACCENT_COLOR}\n      />\n    </Box >\n  );\n}\n\nexport default DashboardPage;"],"names":["captureChartWithLightModeStyles","async","element","canvas","querySelector","console","error","chartInstance","Chart","getChart","originalOptions","JSON","parse","stringify","options","paperElement","originalPaperBg","style","backgroundColor","lightModeTextColor","lightModeGridColor","plugins","legend","labels","color","title","scales","x","ticks","grid","y","update","html2canvas","scale","useCORS","toDataURL","generateDashboardPdfReport","currentUser","overallStats","activityChartElement","subjectAveragesChartElement","topicPerformanceElement","isSubjectSelected","timeFrequencyLabel","_ref","alert","pdf","jsPDF","orientation","unit","format","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","margin","contentWidth","currentY","setFontSize","setFont","undefined","text","align","concat","name","Date","totalQuizzes","overallAverageScore","addPage","topicImgData","textElements","querySelectorAll","originalTextColors","forEach","el","push","item","captureElementAsImage","topicImgProps","getImageProperties","topicImgHeight","height","width","addImage","activityImgData","activityImgProps","activityImgHeight","subjectImgData","subjectImgProps","subjectImgHeight","save","timeFrequencyOptions","value","label","timeFrequency","onTimeFrequencyChange","allSubjects","selectedSubject","onSubjectChange","validTimeFrequency","some","opt","_jsx","Paper","elevation","sx","p","xs","sm","mb","children","_jsxs","Grid","container","spacing","md","lg","xl","Typography","variant","fontSize","FormControl","size","fullWidth","InputLabel","id","Select","labelId","onChange","map","MenuItem","disabled","length","subj","subjectKey","forwardRef","ref","_chartData$labels","chartData","chartOptions","theme","useTheme","mt","palette","background","paper","primary","ml","Box","Math","max","Bar","data","textAlign","secondary","pt","KpiCard","subject","icon","borderTop","display","justifyContent","alignItems","gap","fontWeight","average","count","_ref2","bestSubject","weakestSubject","TrendingUpIcon","success","main","TrendingDownIcon","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","activityData","responsive","maintainAspectRatio","position","tooltip","callbacks","context","date","parseISO","isValid","type","time","tooltipFormat","displayFormats","day","week","month","maxRotation","autoSkipPadding","alpha","beginAtZero","stepSize","interaction","intersect","mode","flexWrap","Line","onGenerate","isLoading","accentColor","my","Button","startIcon","PictureAsPdfIcon","onClick","augmentColor","dark","minWidth","py","topics","subjectName","List","topic","index","React","ListItem","ListItemText","flexBasis","LinearProgress","borderRadius","grey","info","Divider","component","offscreenStyle","top","left","BarElement","_theme$palette$dashbo","_allSubjects$find","navigate","useNavigate","isLoadingAuth","useAuth","DASHBOARD_ACCENT_COLOR","dashboardAccent","userResults","isLoadingData","isGeneratingPdf","processedStats","subjectAverageScoreChartOptions","activityChartRef","topicPerformanceRef","subjectAveragesChartRef","fetchDashboardData","handleTimeFrequencyChange","handleGenerateReport","handleSubjectChange","setUserResults","useState","setAllSubjects","allTopics","setAllTopics","setIsLoadingData","setError","useRef","setTimeFrequency","setSelectedSubject","setIsGeneratingPdf","useCallback","resultsRes","subjectsRes","topicsRes","Promise","all","apiClient","get","headers","Authorization","token","r","_objectSpread","percentage","parseFloat","filter","isNaN","err","_err$response","_err$response$data","response","message","useEffect","useMemo","filteredResults","subjectStats","datasets","subjectAverageScoreChartData","topicPerformance","today","startOfDay","startDate","min","timestamp","subDays","Number","resultsInTimePeriod","resultDate","_r$subject","toLowerCase","keyLower","results","_r$subject2","percentages","round","reduce","a","b","subjectsWithStats","Object","values","t","_t$subject","topicResults","topicId","avgScore","acc","Boolean","sort","activityCounts","dayKey","chartLabels","eachDayOfInterval","start","end","d","fill","borderColor","tension","s","borderWidth","indexAxis","c","parsed","callback","v","event","target","timeFreqOption","find","current","String","useDashboard","minHeight","CircularProgress","px","gutterBottom","Alert","severity","m","mx","DashboardControls","_Fragment","KpiDisplay","TopicPerformanceList","DashboardActivityChart","SubjectAveragesChart","GenerateReportButton","maxWidth"],"sourceRoot":""}