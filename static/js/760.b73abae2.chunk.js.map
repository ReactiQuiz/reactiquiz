{"version":3,"file":"static/js/760.b73abae2.chunk.js","mappings":"qTA2JA,QAjJA,SAA4BA,GAMxB,IAADC,EAAA,IAN0B,KAC3BC,EAAI,QACJC,EAAO,YACPC,EAAW,qBACXC,EAAoB,YACpBC,GACDN,EACC,MAAMO,GAAQC,EAAAA,EAAAA,MACPC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,IAClDG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAcC,IAAmBV,EAAAA,EAAAA,WAAS,GAE3CW,EAAuBhB,GAAeC,EAAMgB,QAAQC,UAAUC,KAE9DC,GAAeC,EAAAA,EAAAA,cAAYC,UAC/B,GAAgB,OAAXxB,QAAW,IAAXA,GAAAA,EAAayB,MAAlB,CACAhB,GAAoB,GACpBI,EAAS,IACT,IACE,MAAMa,QAAiBC,EAAAA,EAAUC,IAAI,eAAgB,CACnDC,QAAS,CAAEC,cAAc,UAADC,OAAY/B,EAAYyB,UAElDnB,EAAeoB,EAASM,MAAQ,GAClC,CAAE,MAAOC,GACPpB,EAAS,qCACTqB,QAAQtB,MAAM,0BAA2BqB,EAC3C,CAAC,QACCxB,GAAoB,EACtB,CAb+B,CAa/B,GACC,CAAY,OAAXT,QAAW,IAAXA,OAAW,EAAXA,EAAayB,QAoDjB,OAlDAU,EAAAA,EAAAA,YAAU,KACJrC,IACFwB,IACAX,EAAoB,IACpBE,EAAS,IACTE,EAAkB,IAClBE,GAAgB,GAClB,GACC,CAACnB,EAAMwB,KA2CRc,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACvC,KAAMA,EAAMC,QAASA,EAASuC,WAAY,CAAEC,GAAI,CAAEC,SAAU,QAASC,SAAU,UAAYC,SAAA,EACjGC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAACL,GAAI,CAAEM,gBAAiB3B,EAAsB4B,MAAO3C,EAAMgB,QAAQ4B,gBAAgB7B,GAAuB8B,GAAI,IAAKC,GAAI,GAAIP,SAAC,wBAGxIN,EAAAA,EAAAA,MAACc,EAAAA,EAAa,CAACX,GAAI,CAAEU,GAAI,kBAAmBE,QAAS,OAAQC,cAAe,SAAUC,IAAK,GAAIX,SAAA,EAC7FC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,QAAQC,cAAY,EAAAd,SAAC,mEAGzCN,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAACmB,GAAG,EAAGC,WAAW,aAAD5B,OAAeb,GAAwB0C,GAAG,GAAGlB,SAAA,EACnEN,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,KAAsB,OAApBzC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB4D,YAAa,UACxFzB,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,KAAsB,OAApBzC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB6D,aAAc,UAC9F1B,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,KAAsB,OAApBzC,QAAoB,IAApBA,GAAiC,QAAbJ,EAApBI,EAAsB8D,mBAAW,IAAAlE,OAAb,EAApBA,EAAmCmE,SAAU,UACjF,OAApB/D,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBgE,aAAa7B,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,IAAEzC,EAAqBgE,cACzF,OAApBhE,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBiE,WAAW9B,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAOb,SAAA,EAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAAiB,IAAEzC,EAAqBiE,cAGjH1D,GAAmBmC,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAAC5B,GAAI,CAAC6B,UAAW,SAAUtB,MAAO5B,MACrEkB,EAAAA,EAAAA,MAACiC,EAAAA,EAAW,CAACC,WAAS,EAACC,OAAO,SAASC,SAAiC,IAAvBnE,EAAY2D,OAAatB,SAAA,EACxEC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,GAAG,gCAA+BhC,SAAC,gCAC/CN,EAAAA,EAAAA,MAACuC,EAAAA,EAAM,CACLC,QAAQ,gCACRC,MAAOnE,EACPoE,MAAM,6BACNC,SAAWC,GAAMrE,EAAoBqE,EAAEC,OAAOJ,OAC9CK,UAAW,CAAE5C,WAAY,CAAEC,GAAI,CAAEM,gBAAiB1C,EAAMgB,QAAQgE,WAAWC,SAAY1C,SAAA,EAEvFC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAQ,CAACR,MAAM,GAAEnC,UAACC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACtBrC,EAAYiF,KAAKC,IAChB5C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAQ,CAAuBR,MAAOU,EAAOC,SAAS9C,SACpD6C,EAAOE,gBADKF,EAAOC,eAKF,IAAvBnF,EAAY2D,SAAiBxD,IAAoBmC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,UAAUT,MAAM,iBAAgBJ,SAAC,qFAI1G9B,IAAS+B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,SAAS,QAAQpD,GAAI,CAAEqD,GAAI,GAAIlD,SAAE9B,IACjDE,IAAkB6B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,SAAS,UAAUpD,GAAI,CAAEqD,GAAI,GAAIlD,SAAE5B,QAE/DsB,EAAAA,EAAAA,MAACyD,EAAAA,EAAa,CAACtD,GAAI,CAAEuD,EAAG,aAAcpD,SAAA,EACpCC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CAACC,QAASjG,EAASwC,GAAI,CAAEO,MAAO5B,GAAuBwB,SAAC,YAC/DC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CACLC,QApFoBxE,UAC1B,GAAKd,EAIL,GAAKT,GAAyBA,EAAqB8D,aAA2D,IAA5C9D,EAAqB8D,YAAYC,QAAiB/D,EAAqBiE,QAAzI,CAKAjD,GAAgB,GAChBJ,EAAS,IACTE,EAAkB,IAElB,IACE,MAAMkF,EAAU,CACdC,qBAAsBxF,EACtByF,SAAUlG,EAAqBmG,QAC/BC,WAAYpG,EAAqB4D,UACjCC,WAAY7D,EAAqB6D,WACjCwC,cAAerG,EAAqB8D,YAAYC,OAChDuC,WAAYtG,EAAqBgE,WAAa,KAC9CuC,kBAAmBC,KAAKC,UAAUzG,EAAqB8D,aACvDG,QAASjE,EAAqBiE,SAE1BxC,QAAiBC,EAAAA,EAAUgF,KAAK,kBAAmBV,EAAS,CAChEpE,QAAS,CAAEC,cAAc,UAADC,OAAY/B,EAAYyB,UAElDV,EAAkBW,EAASM,KAAK4E,SAAW,gCAC3CC,YAAW,KACT9G,GAAS,GACR,IACL,CAAE,MAAOkC,GAAM,IAAD6E,EAAAC,EACZlG,GAAqB,QAAZiG,EAAA7E,EAAIP,gBAAQ,IAAAoF,GAAM,QAANC,EAAZD,EAAc9E,YAAI,IAAA+E,OAAN,EAAZA,EAAoBH,UAAW,wFACxC1E,QAAQtB,MAAM,2BAA4BqB,EAAIP,UAAYO,EAC5D,CAAC,QACChB,GAAgB,EAClB,CA7BA,MAFIJ,EAAS,kEAJXA,EAAS,uCAmCX,EAgDM0C,QAAQ,YACRiB,SAAUxD,GAAgBR,IAAqBE,GAA2C,IAAvBL,EAAY2D,OAC/EzB,GAAI,CACFM,gBAAiB3B,EACjB4B,MAAO3C,EAAMgB,QAAQ4B,gBAAgB7B,GACrC,UAAW,CAAE2B,iBAAiBmE,EAAAA,EAAAA,IAAO9F,EAAsB,MAE7D+F,UAAWjG,GAAe2B,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAAC+C,KAAM,GAAIpE,MAAM,aAAcH,EAAAA,EAAAA,KAACwE,EAAAA,EAAiB,IAAIzE,SAE/F1B,EAAe,aAAe,wBAKzC,C,yDCrJA,SAAeoG,EAAAA,EAAAA,IAA2BzE,EAAAA,EAAAA,KAAK,OAAQ,CACrD0E,EAAG,6EACD,S,iPCqDJ,QAtDA,SAAmCzH,GAM/B,IANgC,QAClC0H,EAAO,UACPC,EAAS,MACT3G,EAAK,oBACL4G,EAAmB,YACnBtH,GACDN,EACC,MAAMO,GAAQC,EAAAA,EAAAA,MACPqH,EAASC,IAAcnH,EAAAA,EAAAA,WAAS,GAEjCW,EAAuBhB,GAAeC,EAAMgB,QAAQC,UAAUC,KAEpE,OAAIkG,GACK5E,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAAC5B,GAAI,CAAEO,MAAO5B,EAAsBiC,QAAS,QAASwE,GAAI,OAAQC,GAAI,KAG5FhH,GACK+B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,SAAS,UAAUpD,GAAI,CAACqF,GAAI,GAAGlF,SAAE9B,IAG1B,IAAnB0G,EAAQtD,QACHrB,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACR,MAAM,iBAAiBP,GAAI,CAACqF,GAAI,GAAGlF,SAAC,0DAIvDN,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEqB,GAAI,GAAIlB,SAAA,EACjBC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACjB,GAAI,CAAEO,MAAO5B,EAAsB2G,QAAS,KAAOnF,SAAC,yCAG1FC,EAAAA,EAAAA,KAACmF,EAAAA,EAAI,CAACC,OAAK,EAACxF,GAAI,CAACuD,EAAE,GAAGpD,SACnB4E,EAAQU,MAAM,EAAGP,EAAUH,EAAQtD,OArBd,GAqB4CsB,KAAK2C,IACrEtF,EAAAA,EAAAA,KAACuF,EAAAA,EAAoB,CAEnBD,OAAQA,EACRE,cAAeA,IAAMX,EAAoBS,GACzCG,kBAAkB,GAAO,wBAAArG,OAHIkG,EAAOvD,SAOzC4C,EAAQtD,OA9Be,IA+BtBrB,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAClB,GAAI,CAAEY,QAAS,OAAQkF,eAAgB,SAAUzC,GAAI,GAAIlD,UAC5DC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CACLC,QAASA,IAAM0B,GAAYD,GAC3BlF,GAAI,CAAEO,MAAO5B,GACbgG,KAAK,QAAOxE,SAEX+E,EAAU,YAAW,cAAA1F,OAAiBuF,EAAQtD,OArC7B,EAqCyD,gBAMvF,E,wBCjDA,MAAMsE,EAA2BA,CAACzE,EAAWI,EAAWH,KACpD,IAAIyE,EAAO1E,GAAa,gBAGxB,OAFII,IAAWsE,GAAI,WAAAxG,OAAekC,EAAS,MACvCH,IAAYyE,GAAI,MAAAxG,OAAU+B,EAAW0E,OAAO,GAAGC,cAAgB3E,EAAWkE,MAAM,KAC7EO,CAAI,EA0Ff,QAvFA,SAA+B3I,GAO3B,IAP4B,WAC9B8I,EAAU,UACVnB,EAAS,MACT3G,EAAK,gBACL+H,EAAe,cACfC,EAAa,YACb1I,GACDN,EACC,MAAMO,GAAQC,EAAAA,EAAAA,KACRc,EAAuBhB,GAAeC,EAAMgB,QAAQC,UAAUC,KA0DpE,OAAIkG,GACK5E,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAAC5B,GAAI,CAAEO,MAAO5B,EAAsBiC,QAAS,QAASwE,GAAI,OAAQC,GAAI,KAE5FhH,GACK+B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACC,SAAS,QAAQpD,GAAI,CAACqF,GAAI,GAAGlF,SAAE9B,IAErB,IAAtB8H,EAAW1E,QACNrB,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACR,MAAM,iBAAiBP,GAAI,CAACqF,GAAI,GAAGlF,SAAC,6BAIvDN,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEqB,GAAI,GAAIlB,SAAA,EACjBC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACjB,GAAI,CAAEO,MAAO5B,EAAsB2G,QAAS,KAAOnF,SAAC,wBAGzFgG,EAAWpD,KAAIuD,GAvESA,KAAe,IAADC,EAKzC,IAAIC,EAAaF,EAAUG,OAAOR,OAAO,GAAGC,cAAgBI,EAAUG,OAAOhB,MAAM,GAC/EiB,EAAc,UACdC,EAAc,SAMlB,MAJyB,YAArBL,EAAUG,QAA6C,yBAArBH,EAAUG,SAC5CC,EAAc,UAAWC,EAAc,aAIzCvG,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CAEJC,UAAW,EACX7G,GAAI,CACFqB,GAAI,EAAGkC,EAAG,EACVnC,WAAW,aAAD5B,OAAesH,EAAAA,EAA0C,QAAlBP,EAACD,EAAU3E,eAAO,IAAA4E,OAAA,EAAjBA,EAAmBQ,gBAAkBnJ,EAAMgB,QAAQoI,KAAK,OAC1G7G,UAEFN,EAAAA,EAAAA,MAACoH,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAQjH,SAAA,EAC7CN,EAAAA,EAAAA,MAACoH,EAAAA,EAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEpH,SAAA,EACvBC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,GAAI,CAAEwH,cAAe,aAAcC,WAAY,KAAMtH,SAC3E4F,EAAyBO,EAAUxC,WAAYwC,EAAUtC,WAAYsC,EAAU/E,eAElF1B,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQT,MAAM,iBAAgBJ,SAAA,CAAC,mBAClCC,EAAAA,EAAAA,KAAA,UAAAD,SAASmG,EAAUoB,oBAAsB,eAE1D7H,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,UAAUJ,QAAQ,QAAQL,MAAM,iBAAgBJ,SAAA,CAAC,aACxD,IAAIwH,KAAKrB,EAAUsB,YAAYC,qBACzCvB,EAAUwB,YAAU,cAAAtI,OAAkB,IAAImI,KAAKrB,EAAUwB,YAAYD,qBAAoB,YAG9FhI,EAAAA,EAAAA,MAACoH,EAAAA,EAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGL,WAAS,EAACa,UAAU,SAASX,WAAY,CAAEE,GAAI,aAAcC,GAAI,YAAcJ,QAAS,GAAIhH,SAAA,EACpHN,EAAAA,EAAAA,MAACoH,EAAAA,EAAI,CAACI,MAAI,EAAAlH,SAAA,CAAC,KAACC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CAACzF,MAAOiE,EAAYjG,MAAOmG,EAAa/B,KAAK,QAAQ3D,QAAS2F,IAAe,QACtE,YAArBL,EAAUG,QAA8C,yBAArBH,EAAUG,QAAqCH,EAAU2B,gBAAkB5B,KAC/GjG,EAAAA,EAAAA,KAAC6G,EAAAA,EAAI,CAACI,MAAI,EAACrH,GAAI,CAAEqD,GAAI,GAAIlD,UACvBC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CACLxC,QAAQ,YACR2D,KAAK,QACLD,WAAWtE,EAAAA,EAAAA,KAACwE,EAAAA,EAAiB,IAC7BnB,QAASA,IAAM2C,EAAgBE,GAC/BtG,GAAI,CAAEM,gBAAiB3B,EAAsB,UAAW,CAAE2B,iBAAiBmE,EAAAA,EAAAA,IAAO9F,EAAsB,MAASwB,SAClH,4BA9BJmG,EAAUnE,GAqCT,EAmBqB+F,CAAoB5B,OAGvD,ECNA,QAlFA,WAA2B,IAAD6B,EAAA7K,EACxB,MAAMM,GAAQC,EAAAA,EAAAA,KACRuK,GAAWC,EAAAA,EAAAA,OACX,YAAE5K,EAAW,cAAE6K,IAAkBC,EAAAA,EAAAA,KACjCC,GAAwD,QAA9BL,EAAAvK,EAAMgB,QAAQ6J,wBAAgB,IAAAN,OAAA,EAA9BA,EAAgCrJ,OAAQlB,EAAMgB,QAAQC,UAAUC,MAG1F,cACJ4J,EAAa,uBACbC,EAAsB,mBACtBC,EAAkB,0BAClBC,EAAyB,iBACzBC,EAAgB,aAChBC,EAAY,wBACZC,EAAuB,qBACvBtL,EAAoB,mCACpBuL,EAAkC,+BAClCC,EAA8B,qBAC9BC,GCpB0B1L,KAC5B,MAAM2K,GAAWC,EAAAA,EAAAA,OAGVK,EAAeU,IAAoBpL,EAAAA,EAAAA,UAAS,KAC5C2K,EAAwBU,IAA6BrL,EAAAA,EAAAA,WAAS,IAC9D4K,EAAoBU,IAAyBtL,EAAAA,EAAAA,UAAS,KAEtD6K,EAA2BU,IAAgCvL,EAAAA,EAAAA,UAAS,KACpE8K,EAAkBU,IAAuBxL,EAAAA,EAAAA,WAAS,IAClD+K,EAAcU,IAAmBzL,EAAAA,EAAAA,UAAS,KAG1CgL,EAAyBU,IAA8B1L,EAAAA,EAAAA,WAAS,IAChEN,EAAsBiM,IAA2B3L,EAAAA,EAAAA,UAAS,MAG3D4L,GAAqB5K,EAAAA,EAAAA,cAAYC,UACrC,GAAgB,OAAXxB,QAAW,IAAXA,GAAAA,EAAa0E,IAAkB,OAAX1E,QAAW,IAAXA,GAAAA,EAAayB,MAAtC,CAIAmK,GAA0B,GAC1BC,EAAsB,IACtB,IAEE,MAAMnK,QAAiBC,EAAAA,EAAUC,IAAI,uBAADG,OAAwB/B,EAAY0E,GAAE,mCAAmC,CAC3G7C,QAAS,CAAEC,cAAc,UAADC,OAAY/B,EAAYyB,UAElDkK,EAAiBjK,EAASM,MAAQ,GACpC,CAAE,MAAOC,GAAM,IAAD6E,EAAAC,EACZ8E,GAAkC,QAAZ/E,EAAA7E,EAAIP,gBAAQ,IAAAoF,GAAM,QAANC,EAAZD,EAAc9E,YAAI,IAAA+E,OAAN,EAAZA,EAAoBH,UAAW,uCACvD,CAAC,QACCgF,GAA0B,EAC5B,CAbA,MAFED,EAAiB,GAenB,GACC,CAAC3L,IAEEoM,GAA4B7K,EAAAA,EAAAA,cAAYC,UAC5C,GAAgB,OAAXxB,QAAW,IAAXA,GAAAA,EAAayB,MAAlB,CAIAsK,GAAoB,GACpBC,EAAgB,IAChB,IACE,MAAMK,QAAmB1K,EAAAA,EAAUC,IAAI,0BAA2B,CAChEC,QAAS,CAAEC,cAAc,UAADC,OAAY/B,EAAYyB,UAElDqK,EAA6BO,EAAWrK,MAAQ,GAClD,CAAE,MAAOC,GAAM,IAADqK,EAAAC,EACZrK,QAAQtB,MAAM,qCAAsCqB,EAAIP,UAAYO,GACpE+J,GAA4B,QAAZM,EAAArK,EAAIP,gBAAQ,IAAA4K,GAAM,QAANC,EAAZD,EAActK,YAAI,IAAAuK,OAAN,EAAZA,EAAoB3F,UAAW,qCACjD,CAAC,QACCmF,GAAoB,EACtB,CAbA,MAFED,EAA6B,GAe/B,GACC,CAAC9L,IA8DJ,OA3DAmC,EAAAA,EAAAA,YAAU,KACJnC,GACFmM,IACAC,MAGAT,EAAiB,IACjBG,EAA6B,IAC7BD,EAAsB,IACtBG,EAAgB,IAClB,GACC,CAAChM,EAAaoM,EAA2BD,IAgDrC,CAELlB,gBACAC,yBACAC,qBACAC,4BACAC,mBACAC,eACAC,0BACAtL,uBAEAuL,mCAxD0CvD,IACrCjI,EAIAiI,EAAOuE,+BAAiF,IAAhDvE,EAAOuE,8BAA8BxI,QAIlFkI,EAAwB,CACtB9F,QAAS6B,EAAO7B,QAChBvC,UAAWoE,EAAOpE,UAClBC,WAAYmE,EAAOnE,WACnB2I,aAAcxE,EAAOuE,8BAA8BxI,OACnDC,UAAWgE,EAAOyE,MAClB3I,YAAakE,EAAOuE,8BACpBtI,QAAS+D,EAAO/D,UAElB+H,GAA2B,IAZzBU,MAAM,gEAJNhC,EAAS,SAAU,CAAEiC,MAAO,CAAEC,KAAM,cAAejG,QAAS,wCAgB9B,EAuChC6E,+BApCqCA,KACnCQ,GAA2B,GAC3BC,EAAwB,KAAK,EAmC/BR,qBAhC4B7C,IAC5B8B,EAAS,mBAAD5I,OAAoB8G,EAAUnE,IAAM,CAC1CkI,MAAO,CACLE,SAAU,YACVC,YAAalE,EAAUnE,GACvB0B,QAASyC,EAAU1C,SACnBtC,UAAWgF,EAAUxC,YAAU,cAAAtE,OAAkB8G,EAAUnE,IAC3DZ,WAAY+E,EAAU/E,WACtB2I,aAAc5D,EAAUvC,cACxBrC,UAAW4E,EAAUtC,WACrBxC,YAAa8E,EAAUrC,kBAAoBC,KAAKuG,MAAMnE,EAAUrC,mBAAqB,KACrFtC,QAAS2E,EAAU3E,SAAW2E,EAAU1C,SAAS8G,MAAM,KAAK,IAAM,YAClEC,UAAWrE,EAAUsE,YAAc,KACnCC,wBAAyBvE,IAE3B,EAkBH,ED9GGwE,CAAcrN,GAIlB,OAAI6K,GAEAzI,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEY,QAAS,OAAQkF,eAAgB,SAAUsB,WAAY,SAAU2D,UAAW,QAAS5K,SAAA,EAC9FC,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAAC5B,GAAI,CAAEO,MAAOiI,MAC/BpI,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACf,GAAI,CAAEgL,GAAI,GAAI7K,SAAC,6BAK5B1C,GAYHoC,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEuD,EAAG,CAAE+D,GAAI,EAAGC,GAAI,EAAG0D,GAAI,GAAK/K,SAAU,QAAS8B,OAAQ,OAAQqB,GAAI,GAAIlD,SAAA,EAChFN,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAACjB,GAAI,CAAEO,MAAOiI,EAAyBf,WAAY,OAAQyD,UAAW,SAAU7J,GAAI,GAAIlB,SAAA,EAC3HC,EAAAA,EAAAA,KAACwE,EAAAA,EAAiB,CAAC5E,GAAI,CAAEmL,cAAe,SAAUC,GAAI,EAAGC,SAAU,QAAS9K,MAAOiI,KAA6B,oBAIlHpI,EAAAA,EAAAA,KAACkL,EAA0B,CACzBvG,QAAS2D,EACT1D,UAAW2D,EACXtK,MAAOuK,EACP3D,oBAAqBgE,EACrBtL,YAAa6K,KAGfpI,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAACvL,GAAI,CAAEqF,GAAI,MAEnBjF,EAAAA,EAAAA,KAACoL,EAAsB,CACrBrF,WAAY0C,EACZ7D,UAAW8D,EACXzK,MAAO0K,EACP3C,gBAAiB+C,EACjB9C,cAA0B,OAAX5I,QAAW,IAAXA,OAAW,EAAXA,EAAa0E,GAC5BxE,YAAa6K,IAGd9K,IACC0C,EAAAA,EAAAA,KAACqL,EAAAA,EAAmB,CAClBlO,KAAMyL,EACNxL,QAAS0L,EACTzL,YAAaA,EACbC,qBAAsBA,EACtBC,YAAamJ,EAAAA,EAAqD,QAA7BxJ,EAACI,EAAqBiE,eAAO,IAAArE,OAAA,EAA5BA,EAA8ByJ,gBAAkByB,QAzC1FpI,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAClB,GAAI,CAAEuD,EAAG,EAAG2H,UAAW,SAAUhL,SAAU,QAAS8B,OAAQ,OAAQqB,GAAI,GAAIlD,UAC/EN,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CAACC,UAAW,EAAG7G,GAAI,CAAEuD,EAAG,EAAGmI,UAAU,aAADlM,OAAegJ,IAA4BrI,SAAA,EACnFC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,KAAIb,SAAC,kDACzBC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,CAACxC,QAAQ,YAAYyC,QAASA,IAAM2E,EAAS,UAAWpI,GAAI,CAAEqD,GAAI,EAAG/C,gBAAiBkI,EAAyB,UAAW,CAAElI,iBAAiBmE,EAAAA,EAAAA,IAAO+D,EAAyB,MAASrI,SAAC,oBA2CxM,C,mMEmBA,QAvGA,SAA6B9C,GAAkE,IAADsO,EAAA,IAAhE,OAAEjG,EAAM,cAAEkG,EAAa,iBAAE/F,EAAgB,kBAAEgG,GAAmBxO,EAC1F,MAAMO,GAAQC,EAAAA,EAAAA,KACRuK,GAAWC,EAAAA,EAAAA,MAEjB,IAAK3C,EACH,OAAO,KAGT,MAAMpE,GAAYwK,EAAAA,EAAAA,IAAuBpG,EAAO7B,QAAS6B,EAAOpE,UAAWuK,EAAmBnG,GACxFqG,EAAkBC,EAAAA,EAAkC,QAAfL,EAACjG,EAAO/D,eAAO,IAAAgK,OAAA,EAAdA,EAAgB5E,gBAAkBnJ,EAAMgB,QAAQoI,KAAK,KA4BjG,OACEnH,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CACJnD,QA5BsBwI,KACpBvG,GAAUA,EAAOvD,IACnBiG,EAAS,YAAD5I,OAAakG,EAAOvD,IAC9B,EA0BEnC,GAAI,CACFuD,EAAG,IACH2I,OAAQ,OACRtL,QAAS,OACTC,cAAe,SACfsL,aAAc,EACd/K,WAAW,aAAD5B,OAAeuM,GACzBK,OAAQ,UACRC,WAAY,kCACZ,UAAW,CACTC,UAAW,mBACXC,UAAW3O,EAAM4O,QAAQ,GACzBlM,iBAAiBmM,EAAAA,EAAAA,IAAM7O,EAAMgB,QAAQ8N,OAAOC,MAAO,OAGvD9F,UAAW,EAAE1G,SAAA,EAEbN,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAE4M,SAAU,GAAIzM,SAAA,EACvBN,EAAAA,EAAAA,MAACgN,EAAAA,EAAK,CAAC9E,UAAU,MAAMZ,QAAS,EAAGC,WAAW,SAASpH,GAAI,CAAEqB,GAAI,GAAIlB,SAAA,CAClE0L,IAAqBzL,EAAAA,EAAAA,KAACwE,EAAAA,EAAiB,CAAC5E,GAAI,CAAEO,MAAOwL,EAAiBV,SAAU,WACjFjL,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAQ,YAAYhB,GAAI,CAAEwH,cAAe,aAAcC,WAAY,IAAKlH,MAAOwL,EAAiBe,WAAY,IAAKF,SAAU,GAAIzM,SACxImB,QAGLzB,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEY,QAAS,OAAQmM,SAAU,OAAQjM,IAAK,GAAKuC,GAAI,GAAK+D,WAAY,UAAWjH,SAAA,CACrFuF,EAAOyE,QAAS/J,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CAACzF,MAAK,SAAA/C,OAAWkG,EAAOyE,OAASxF,KAAK,QAAQ3D,QAAQ,WAAWhB,GAAI,CAAEqL,SAAU,SAAUa,OAAQ,UACxHxG,EAAOnE,aAAcnB,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CAACzF,MAAOmD,EAAOnE,WAAYoD,KAAK,QAAQ3D,QAAQ,WAAWhB,GAAI,CAAEwH,cAAe,aAAc6D,SAAU,SAAUa,OAAQ,WAErJ9L,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CAACzF,MAAO,IAAIoF,KAAKjC,EAAOsH,WAAWnF,qBAAsBlD,KAAK,QAAQ3D,QAAQ,WAAWhB,GAAI,CAAEqL,SAAU,SAAUa,OAAQ,iBAIpIrM,EAAAA,EAAAA,MAACgN,EAAAA,EAAK,CAAC9E,UAAU,MAAMjC,eAAe,gBAAgBsB,WAAW,SAASpH,GAAI,CAAEqD,GAAI,IAAK3C,GAAI,EAAGgL,UAAU,aAADlM,OAAe5B,EAAMgB,QAAQqO,UAAY9M,SAAA,EAChJC,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAAClB,GAAI,CAAEY,QAAS,OAAQwG,WAAY,SAAUtG,IAAK,IAAMX,UAE3DN,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQhB,GAAI,CAAEyH,WAAY,QAAStH,SAAA,CACpDuF,EAAOwH,MAAM,IAAExH,EAAOyH,qBAI3BtN,EAAAA,EAAAA,MAACqB,EAAAA,EAAG,CAAClB,GAAI,CAAEY,QAAS,OAAQwG,WAAY,SAAUtG,IAAK,GAAIX,SAAA,EACzDC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CACHzF,MAAK,GAAA/C,OAAKkG,EAAO0H,WAAU,KAC3BpN,IAAEqN,EAAAA,EAAAA,GAAA,CACA5F,WAAY,OACZ4D,SAAU,SACVa,OAAQ,SApEUkB,EAqEM1H,EAAO0H,WApErCA,GAAc,GACT,CACL9M,gBAAiB1C,EAAMgB,QAAQ0O,QAAQxO,KACvCyB,MAAO3C,EAAMgB,QAAQ4B,gBAAgB5C,EAAMgB,QAAQ0O,QAAQxO,OAG3DsO,GAAc,GACT,CACL9M,gBAAiB1C,EAAMgB,QAAQ2O,QAAQzO,KACvCyB,MAAO3C,EAAMgB,QAAQ4B,gBAAgB5C,EAAMgB,QAAQ2O,QAAQzO,OAGxD,CACLwB,gBAAiB1C,EAAMgB,QAAQP,MAAMS,KACrCyB,MAAO3C,EAAMgB,QAAQ4B,gBAAgB5C,EAAMgB,QAAQP,MAAMS,WAyDpD+G,GAAoB+F,IACnBxL,EAAAA,EAAAA,KAACoN,EAAAA,EAAO,CAACC,MAAM,gBAAetN,UAC5BC,EAAAA,EAAAA,KAACsN,EAAAA,EAAU,CAAC/I,KAAK,QAAQlB,QAAUhB,IAAQA,EAAEkL,kBAAmB/B,EAAclG,EAAOvD,GAAG,EAAKnC,GAAI,CAAEO,MAAO3C,EAAMgB,QAAQP,MAAMuP,MAAO,UAAW,CAAEtN,iBAAiBmM,EAAAA,EAAAA,IAAM7O,EAAMgB,QAAQP,MAAMS,KAAM,MAASqB,UAC1MC,EAAAA,EAAAA,KAACyN,EAAAA,EAAU,CAACxC,SAAS,uBA3EL+B,KAmFhC,C,mECnGO,MAAMU,EAAwBC,GAC9BC,MAAMC,QAAQF,GAIZA,EAAehL,KAAImL,IACxB,IAAKA,GAAkB,kBAANA,EAEb,OADAvO,QAAQwO,KAAK,0DAA2DD,GACjEA,EAEX,IAAIE,EAAgB,GACpB,GAAyB,kBAAdF,EAAEG,QACX,IACED,EAAgBlK,KAAKuG,MAAMyD,EAAEG,SACxBL,MAAMC,QAAQG,KACfzO,QAAQwO,KAAK,uCAAD3O,OAAwC0O,EAAE/L,GAAE,qBAAqBiM,GAC7EA,EAAgB,GAEtB,CAAE,MAAO3L,GACP9C,QAAQtB,MAAM,uDAADmB,OAAwD0O,EAAE/L,GAAE,KAAK+L,EAAEG,QAAS5L,EAC3F,MACSuL,MAAMC,QAAQC,EAAEG,SACzBD,EAAgBF,EAAEG,aACKC,IAAdJ,EAAEG,SAAuC,OAAdH,EAAEG,SACtC1O,QAAQwO,KAAK,2BAAD3O,OAA4B0O,EAAE/L,GAAE,yDAAyD+L,EAAEG,SAEzG,OAAAhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYa,GAAC,IAAEG,QAASD,GAAa,KAxBrCzO,QAAQwO,KAAK,6DAA8DJ,GACpE,IAmCEjC,EAAyB,SAACjI,GAAsF,IAA7E0K,EAAkBC,UAAA/M,OAAA,QAAA6M,IAAAE,UAAA,GAAAA,UAAA,GAAG,KAAMC,EAAWD,UAAA/M,OAAA,QAAA6M,IAAAE,UAAA,IAAAA,UAAA,GAAUE,EAAgBF,UAAA/M,OAAA,QAAA6M,IAAAE,UAAA,GAAAA,UAAA,GAAG,KAEjH,GAAIC,GAA+B,OAAhBC,QAAgB,IAAhBA,GAAAA,EAAkB5K,WAAY,MAAM,cAANtE,OAAqBkP,EAAiB5K,YACvF,GAAI2K,GAAeF,EAAoB,MAAM,cAAN/O,OAAqB+O,GAC5D,GAAIE,EAAa,MAAM,cAANjP,OAAqBqE,EAAU8K,OAAO9K,GAAS+K,QAAQ,KAAM,KAAO,QACrF,GAAIL,GAAsB1K,GAAW0K,IAAuBI,OAAO9K,GAAS+K,QAAQ,KAAM,KAAQ,OAAOL,EACzG,IAAK1K,EAAS,MAAO,MACrB,IAAImC,EAAO2I,OAAO9K,GAAS+K,QAAQ,KAAM,KACzC5I,EAAOA,EAAK4I,QAAQ,yBAA0B,2BAC9C5I,EAAOA,EAAK4I,QAAQ,SAAU,QAU9B,OARA5I,EAAOA,EAAK4I,QADa,4BACa,CAACC,EAAOC,IAAE,YAAAtP,OAAiBsP,EAAG5I,iBAAiB6I,OACrF/I,EAAOA,EAAK0E,MAAM,KAAK3H,KAAIiM,GACE,UAAvBA,EAAKjI,eAAoD,QAAvBiI,EAAKjI,cAAgCiI,EACvEA,EAAKC,SAAS,KAAeD,EAAKtE,MAAM,KAAK3H,KAAImM,GAAQA,EAAKjJ,OAAO,GAAGC,cAAgBgJ,EAAKzJ,MAAM,GAAGsB,gBAAeoI,KAAK,KACvHH,EAAK/I,OAAO,GAAGC,cAAgB8I,EAAKvJ,MAAM,GAAGsB,gBAAkBoI,KAAK,KAC7EnJ,EAAOA,EAAK4I,QAAQ,uCAAuC,CAACC,EAAOnN,EAAWH,IAAU,8BAAA/B,OAAmCkC,EAAS,MAAAlC,OAAK+B,EAAW0E,OAAO,GAAGC,cAAgB3E,EAAWkE,MAAM,GAAE,OACjMO,EAAOA,EAAK4I,QAAQ,oBAAoB,CAACC,EAAOnN,EAAW0N,IAAI,aAAA5P,OAAkBkC,EAAS,MAAAlC,OAAK4P,EAAI,OACnGpJ,EAAOA,EAAK4I,QAAQ,gCAAgC,CAACC,EAAOnN,EAAW0N,IAAI,aAAA5P,OAAkBkC,EAAS,MAAAlC,OAAK4P,EAAI,OACxGpJ,CACT,EAOaqJ,EAAgBC,IAC3B,IAAKA,IAAUtB,MAAMC,QAAQqB,GAAQ,MAAO,GAC5C,IAAiCC,EAA7BC,EAAeF,EAAM7N,OAGzB,KAAwB,IAAjB+N,GAELD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GACzCA,KAGCF,EAAME,GAAeF,EAAMC,IAAgB,CAC1CD,EAAMC,GAAcD,EAAME,IAE9B,OAAOF,CAAK,C","sources":["components/challenges/ChallengeSetupModal.js","../node_modules/@mui/icons-material/esm/Delete.js","components/challenges/RecentAttemptsForChallenge.js","components/challenges/IncomingChallengesList.js","pages/ChallengesPage.js","hooks/useChallenges.js","components/results/HistoricalResultItem.js","utils/quizUtils.js"],"sourcesContent":["// src/components/ChallengeSetupModal.js\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions, Button, FormControl,\n  InputLabel, Select, MenuItem, Typography, Box, useTheme, CircularProgress, Alert\n} from '@mui/material';\nimport { darken } from '@mui/material/styles';\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\nimport apiClient from '../../api/axiosInstance';\n\nfunction ChallengeSetupModal({\n  open,\n  onClose,\n  currentUser,\n  quizDataForChallenge, // Expected: { topicId, topicName, difficulty, numQuestions, quizClass, questionIds (array of strings), subject }\n  accentColor\n}) {\n  const theme = useTheme();\n  const [friendsList, setFriendsList] = useState([]);\n  const [isLoadingFriends, setIsLoadingFriends] = useState(false);\n  const [selectedFriendId, setSelectedFriendId] = useState('');\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const effectiveAccentColor = accentColor || theme.palette.secondary.main;\n\n  const fetchFriends = useCallback(async () => {\n    if (!currentUser?.token) return;\n    setIsLoadingFriends(true);\n    setError('');\n    try {\n      const response = await apiClient.get('/api/friends', {\n        headers: { Authorization: `Bearer ${currentUser.token}` }\n      });\n      setFriendsList(response.data || []);\n    } catch (err) {\n      setError('Failed to load your friends list.');\n      console.error(\"Error fetching friends:\", err);\n    } finally {\n      setIsLoadingFriends(false);\n    }\n  }, [currentUser?.token]);\n\n  useEffect(() => {\n    if (open) {\n      fetchFriends();\n      setSelectedFriendId(''); \n      setError('');\n      setSuccessMessage('');\n      setIsSubmitting(false);\n    }\n  }, [open, fetchFriends]);\n\n  const handleSendChallenge = async () => {\n    if (!selectedFriendId) {\n      setError('Please select a friend to challenge.');\n      return;\n    }\n    if (!quizDataForChallenge || !quizDataForChallenge.questionIds || quizDataForChallenge.questionIds.length === 0 || !quizDataForChallenge.subject) {\n        setError('Quiz data for challenge is incomplete or missing subject.');\n        return;\n    }\n    \n    setIsSubmitting(true);\n    setError('');\n    setSuccessMessage('');\n\n    try {\n      const payload = {\n        challenged_friend_id: selectedFriendId,\n        topic_id: quizDataForChallenge.topicId,\n        topic_name: quizDataForChallenge.topicName,\n        difficulty: quizDataForChallenge.difficulty,\n        num_questions: quizDataForChallenge.questionIds.length, // Use actual length of questionIds\n        quiz_class: quizDataForChallenge.quizClass || null,\n        question_ids_json: JSON.stringify(quizDataForChallenge.questionIds),\n        subject: quizDataForChallenge.subject \n      };\n      const response = await apiClient.post('/api/challenges', payload, {\n        headers: { Authorization: `Bearer ${currentUser.token}` }\n      });\n      setSuccessMessage(response.data.message || 'Challenge sent successfully!');\n      setTimeout(() => {\n        onClose(); \n      }, 2000);\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to send challenge. They might already be in a challenge or an error occurred.');\n      console.error(\"Error sending challenge:\", err.response || err);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} PaperProps={{ sx: { minWidth: '320px', maxWidth: '500px' } }}>\n      <DialogTitle sx={{ backgroundColor: effectiveAccentColor, color: theme.palette.getContrastText(effectiveAccentColor), pb: 1.5, pt: 2 }}>\n        Challenge a Friend\n      </DialogTitle>\n      <DialogContent sx={{ pt: '20px !important', display: 'flex', flexDirection: 'column', gap: 2 }}>\n        <Typography variant=\"body2\" gutterBottom>\n          You are about to challenge a friend using the following quiz:\n        </Typography>\n        <Box sx={{pl:1, borderLeft: `3px solid ${effectiveAccentColor}`, mb:1}}>\n            <Typography variant=\"body2\"><strong>Topic:</strong> {quizDataForChallenge?.topicName || 'N/A'}</Typography>\n            <Typography variant=\"body2\"><strong>Difficulty:</strong> {quizDataForChallenge?.difficulty || 'N/A'}</Typography>\n            <Typography variant=\"body2\"><strong>Questions:</strong> {quizDataForChallenge?.questionIds?.length || 'N/A'}</Typography>\n            {quizDataForChallenge?.quizClass && <Typography variant=\"body2\"><strong>Class:</strong> {quizDataForChallenge.quizClass}</Typography>}\n            {quizDataForChallenge?.subject && <Typography variant=\"body2\"><strong>Subject:</strong> {quizDataForChallenge.subject}</Typography>}\n        </Box>\n        \n        {isLoadingFriends ? <CircularProgress sx={{alignSelf: 'center', color: effectiveAccentColor}} /> : (\n          <FormControl fullWidth margin=\"normal\" disabled={friendsList.length === 0}>\n            <InputLabel id=\"select-friend-label-challenge\">Select Friend to Challenge</InputLabel>\n            <Select\n              labelId=\"select-friend-label-challenge\"\n              value={selectedFriendId}\n              label=\"Select Friend to Challenge\"\n              onChange={(e) => setSelectedFriendId(e.target.value)}\n              MenuProps={{ PaperProps: { sx: { backgroundColor: theme.palette.background.paper } } }}\n            >\n              <MenuItem value=\"\"><em>-- Select a Friend --</em></MenuItem>\n              {friendsList.map((friend) => (\n                <MenuItem key={friend.friendId} value={friend.friendId}>\n                  {friend.friendUsername}\n                </MenuItem>\n              ))}\n            </Select>\n            {friendsList.length === 0 && !isLoadingFriends && <Typography variant=\"caption\" color=\"text.secondary\">You have no friends to challenge. Add friends from the 'Manage Friends' page.</Typography>}\n          </FormControl>\n        )}\n\n        {error && <Alert severity=\"error\" sx={{ mt: 1 }}>{error}</Alert>}\n        {successMessage && <Alert severity=\"success\" sx={{ mt: 1 }}>{successMessage}</Alert>}\n      </DialogContent>\n      <DialogActions sx={{ p: '16px 24px' }}>\n        <Button onClick={onClose} sx={{ color: effectiveAccentColor }}>Cancel</Button>\n        <Button\n          onClick={handleSendChallenge}\n          variant=\"contained\"\n          disabled={isSubmitting || isLoadingFriends || !selectedFriendId || friendsList.length === 0}\n          sx={{\n            backgroundColor: effectiveAccentColor,\n            color: theme.palette.getContrastText(effectiveAccentColor),\n            '&:hover': { backgroundColor: darken(effectiveAccentColor, 0.2) }\n          }}\n          startIcon={isSubmitting ? <CircularProgress size={20} color=\"inherit\"/> : <SportsKabaddiIcon />}\n        >\n          {isSubmitting ? 'Sending...' : 'Send Challenge'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ChallengeSetupModal;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","// src/components/challenges/RecentAttemptsForChallenge.js\nimport React, { useState } from 'react';\nimport { Box, Typography, List, Button, CircularProgress, Alert, useTheme } from '@mui/material';\nimport HistoricalResultItem from '../results/HistoricalResultItem'; // Adjust path as needed\n\nfunction RecentAttemptsForChallenge({\n  results,\n  isLoading,\n  error,\n  onInitiateChallenge,\n  accentColor\n}) {\n  const theme = useTheme();\n  const [showAll, setShowAll] = useState(false);\n  const MAX_INITIAL_DISPLAY = 3;\n  const effectiveAccentColor = accentColor || theme.palette.secondary.main;\n\n  if (isLoading) {\n    return <CircularProgress sx={{ color: effectiveAccentColor, display: 'block', mx: 'auto', my: 2 }} />;\n  }\n\n  if (error) {\n    return <Alert severity=\"warning\" sx={{my: 2}}>{error}</Alert>;\n  }\n\n  if (results.length === 0) {\n    return <Typography color=\"text.secondary\" sx={{my: 2}}>No recent quiz attempts found to use for challenges.</Typography>;\n  }\n\n  return (\n    <Box sx={{ mb: 4 }}>\n      <Typography variant=\"h5\" gutterBottom sx={{ color: effectiveAccentColor, opacity: 0.85 }}>\n        Initiate Challenge from Recent Quiz\n      </Typography>\n      <List dense sx={{p:0}}>\n        {results.slice(0, showAll ? results.length : MAX_INITIAL_DISPLAY).map((result) => (\n          <HistoricalResultItem\n            key={`recent-challengeable-${result.id}`}\n            result={result}\n            onResultClick={() => onInitiateChallenge(result)}\n            showDeleteButton={false} // These are just for display to start a challenge\n          />\n        ))}\n      </List>\n      {results.length > MAX_INITIAL_DISPLAY && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n          <Button\n            onClick={() => setShowAll(!showAll)}\n            sx={{ color: effectiveAccentColor }}\n            size=\"small\"\n          >\n            {showAll ? 'Show Less' : `Show More (${results.length - MAX_INITIAL_DISPLAY} more)`}\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default RecentAttemptsForChallenge;","// src/components/challenges/IncomingChallengesList.js\nimport React from 'react';\nimport { Box, Typography, Paper, Grid, Button, CircularProgress, Alert, Chip, useTheme } from '@mui/material';\nimport { darken } from '@mui/material/styles';\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\n// import { formatTime } from '../../utils/formatTime'; // Removed if not used\nimport { subjectAccentColors as themeSubjectAccentColors } from '../../theme';\n\nconst formatChallengeTopicName = (topicName, quizClass, difficulty) => {\n    let name = topicName || \"Unknown Topic\";\n    if (quizClass) name += ` (Class ${quizClass})`;\n    if (difficulty) name += ` - ${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}`;\n    return name;\n};\n\nfunction IncomingChallengesList({\n  challenges,\n  isLoading,\n  error,\n  onPlayChallenge,\n  currentUserId,\n  accentColor\n}) {\n  const theme = useTheme();\n  const effectiveAccentColor = accentColor || theme.palette.secondary.main;\n\n  const renderChallengeItem = (challenge) => {\n    // const opponentUsername = challenge.challenger_id === currentUserId // This wasn't used in the JSX\n    //     ? challenge.challengedUsername\n    //     : challenge.challengerUsername;\n\n    let statusText = challenge.status.charAt(0).toUpperCase() + challenge.status.slice(1);\n    let statusColor = \"default\";\n    let chipVariant = \"filled\";\n\n    if (challenge.status === 'pending' || challenge.status === 'challenger_completed') {\n        statusColor = \"warning\"; chipVariant = \"outlined\";\n    }\n\n    return (\n      <Paper\n        key={challenge.id}\n        elevation={2}\n        sx={{\n          mb: 2, p: 2,\n          borderLeft: `4px solid ${themeSubjectAccentColors[challenge.subject?.toLowerCase()] || theme.palette.grey[500]}`\n        }}\n      >\n        <Grid container spacing={1} alignItems=\"center\">\n          <Grid item xs={12} sm={8}>\n            <Typography variant=\"h6\" sx={{ textTransform: 'capitalize', fontWeight: 500 }}>\n              {formatChallengeTopicName(challenge.topic_name, challenge.quiz_class, challenge.difficulty)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Challenged by: <strong>{challenge.challengerUsername || 'A user'}</strong>\n            </Typography>\n            <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n              Received: {new Date(challenge.created_at).toLocaleDateString()}\n              {challenge.expires_at && ` (Expires: ${new Date(challenge.expires_at).toLocaleDateString()})`}\n            </Typography>\n          </Grid>\n          <Grid item xs={12} sm={4} container direction=\"column\" alignItems={{ xs: 'flex-start', sm: 'flex-end' }} spacing={0.5}>\n            <Grid item> <Chip label={statusText} color={statusColor} size=\"small\" variant={chipVariant} /> </Grid>\n            { (challenge.status === 'pending' || (challenge.status === 'challenger_completed' && challenge.challenged_id === currentUserId)) && (\n              <Grid item sx={{ mt: 1 }}>\n                <Button\n                  variant=\"contained\"\n                  size=\"small\"\n                  startIcon={<SportsKabaddiIcon />}\n                  onClick={() => onPlayChallenge(challenge)}\n                  sx={{ backgroundColor: effectiveAccentColor, '&:hover': { backgroundColor: darken(effectiveAccentColor, 0.2) } }}\n                >\n                  Play Challenge\n                </Button>\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  };\n\n  if (isLoading) {\n    return <CircularProgress sx={{ color: effectiveAccentColor, display: 'block', mx: 'auto', my: 2 }} />;\n  }\n  if (error) {\n    return <Alert severity=\"error\" sx={{my: 2}}>{error}</Alert>;\n  }\n  if (challenges.length === 0) {\n    return <Typography color=\"text.secondary\" sx={{my: 2}}>No incoming challenges.</Typography>;\n  }\n\n  return (\n    <Box sx={{ mb: 4 }}>\n      <Typography variant=\"h5\" gutterBottom sx={{ color: effectiveAccentColor, opacity: 0.85 }}>\n        Incoming Challenges\n      </Typography>\n      {challenges.map(challenge => renderChallengeItem(challenge))}\n    </Box>\n  );\n}\n\nexport default IncomingChallengesList;","// src/pages/ChallengesPage.js\nimport { Box, Typography, Paper, Button, Divider, useTheme, darken, CircularProgress } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\n\nimport { useAuth } from '../contexts/AuthContext';\nimport { useChallenges } from '../hooks/useChallenges'; // <-- Import the new hook\nimport { subjectAccentColors as themeSubjectAccentColors } from '../theme';\nimport ChallengeSetupModal from '../components/challenges/ChallengeSetupModal';\nimport RecentAttemptsForChallenge from '../components/challenges/RecentAttemptsForChallenge';\nimport IncomingChallengesList from '../components/challenges/IncomingChallengesList';\n\nfunction ChallengesPage() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { currentUser, isLoadingAuth } = useAuth();\n  const CHALLENGES_ACCENT_COLOR = theme.palette.challengesAccent?.main || theme.palette.secondary.main;\n\n  // Use the custom hook to get all state and logic\n  const {\n    recentResults,\n    isLoadingRecentResults,\n    recentResultsError,\n    pendingReceivedChallenges,\n    isLoadingPending,\n    pendingError,\n    challengeSetupModalOpen,\n    quizDataForChallenge,\n    handleOpenChallengeSetupFromRecent,\n    handleCloseChallengeSetupModal,\n    handleStartChallenge\n  } = useChallenges(currentUser);\n\n  // --- Render Logic ---\n\n  if (isLoadingAuth) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '70vh' }}>\n        <CircularProgress sx={{ color: CHALLENGES_ACCENT_COLOR }} />\n        <Typography sx={{ ml: 2 }}>Loading Challenges...</Typography>\n      </Box>\n    );\n  }\n\n  if (!currentUser) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center', maxWidth: '600px', margin: 'auto', mt: 4 }}>\n        <Paper elevation={3} sx={{ p: 3, borderTop: `4px solid ${CHALLENGES_ACCENT_COLOR}` }}>\n          <Typography variant=\"h6\">Please log in to view and manage challenges.</Typography>\n          <Button variant=\"contained\" onClick={() => navigate('/login')} sx={{ mt: 2, backgroundColor: CHALLENGES_ACCENT_COLOR, '&:hover': { backgroundColor: darken(CHALLENGES_ACCENT_COLOR, 0.2) } }}>Go to Login</Button>\n        </Paper>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: { xs: 1, sm: 2, md: 3 }, maxWidth: '900px', margin: 'auto', mt: 2 }}>\n      <Typography variant=\"h4\" gutterBottom sx={{ color: CHALLENGES_ACCENT_COLOR, fontWeight: 'bold', textAlign: 'center', mb: 3 }}>\n        <SportsKabaddiIcon sx={{ verticalAlign: 'middle', mr: 1, fontSize: '1.3em', color: CHALLENGES_ACCENT_COLOR }} />\n        My Challenges\n      </Typography>\n\n      <RecentAttemptsForChallenge\n        results={recentResults}\n        isLoading={isLoadingRecentResults}\n        error={recentResultsError}\n        onInitiateChallenge={handleOpenChallengeSetupFromRecent}\n        accentColor={CHALLENGES_ACCENT_COLOR}\n      />\n\n      <Divider sx={{ my: 4 }} />\n\n      <IncomingChallengesList\n        challenges={pendingReceivedChallenges}\n        isLoading={isLoadingPending}\n        error={pendingError}\n        onPlayChallenge={handleStartChallenge}\n        currentUserId={currentUser?.id}\n        accentColor={CHALLENGES_ACCENT_COLOR}\n      />\n\n      {quizDataForChallenge && (\n        <ChallengeSetupModal\n          open={challengeSetupModalOpen}\n          onClose={handleCloseChallengeSetupModal}\n          currentUser={currentUser} // Pass currentUser to modal if it needs it directly\n          quizDataForChallenge={quizDataForChallenge}\n          accentColor={themeSubjectAccentColors[quizDataForChallenge.subject?.toLowerCase()] || CHALLENGES_ACCENT_COLOR}\n        />\n      )}\n    </Box>\n  );\n}\n\nexport default ChallengesPage;","// src/hooks/useChallenges.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport apiClient from '../api/axiosInstance';\n\n/**\n * A custom hook to manage all state and logic for the Challenges page.\n * @param {object | null} currentUser - The currently authenticated user object.\n * @returns {object} An object containing all the state, derived data, and handlers needed by the ChallengesPage component.\n */\nexport const useChallenges = (currentUser) => {\n  const navigate = useNavigate();\n\n  // --- State for Data Fetching ---\n  const [recentResults, setRecentResults] = useState([]);\n  const [isLoadingRecentResults, setIsLoadingRecentResults] = useState(false);\n  const [recentResultsError, setRecentResultsError] = useState('');\n\n  const [pendingReceivedChallenges, setPendingReceivedChallenges] = useState([]);\n  const [isLoadingPending, setIsLoadingPending] = useState(false);\n  const [pendingError, setPendingError] = useState('');\n\n  // --- State for UI Modals/Interaction ---\n  const [challengeSetupModalOpen, setChallengeSetupModalOpen] = useState(false);\n  const [quizDataForChallenge, setQuizDataForChallenge] = useState(null);\n\n  // --- Data Fetching Callbacks ---\n  const fetchRecentResults = useCallback(async () => {\n    if (!currentUser?.id || !currentUser?.token) {\n      setRecentResults([]);\n      return;\n    }\n    setIsLoadingRecentResults(true);\n    setRecentResultsError('');\n    try {\n      // Fetch recent results (non-challenges) to initiate new challenges\n      const response = await apiClient.get(`/api/results?userId=${currentUser.id}&limit=5&excludeChallenges=true`, {\n        headers: { Authorization: `Bearer ${currentUser.token}` }\n      });\n      setRecentResults(response.data || []);\n    } catch (err) {\n      setRecentResultsError(err.response?.data?.message || \"Failed to load recent quiz attempts.\");\n    } finally {\n      setIsLoadingRecentResults(false);\n    }\n  }, [currentUser]);\n\n  const fetchPendingChallengeData = useCallback(async () => {\n    if (!currentUser?.token) {\n      setPendingReceivedChallenges([]);\n      return;\n    }\n    setIsLoadingPending(true);\n    setPendingError('');\n    try {\n      const pendingRes = await apiClient.get('/api/challenges/pending', {\n        headers: { Authorization: `Bearer ${currentUser.token}` }\n      });\n      setPendingReceivedChallenges(pendingRes.data || []);\n    } catch (err) {\n      console.error(\"Error fetching pending challenges:\", err.response || err);\n      setPendingError(err.response?.data?.message || \"Failed to load pending challenges.\");\n    } finally {\n      setIsLoadingPending(false);\n    }\n  }, [currentUser]);\n\n  // --- Main useEffect to trigger data fetching ---\n  useEffect(() => {\n    if (currentUser) {\n      fetchRecentResults();\n      fetchPendingChallengeData();\n    } else {\n      // Clear data if user logs out\n      setRecentResults([]);\n      setPendingReceivedChallenges([]);\n      setRecentResultsError('');\n      setPendingError('');\n    }\n  }, [currentUser, fetchPendingChallengeData, fetchRecentResults]);\n\n  // --- Event Handlers ---\n  const handleOpenChallengeSetupFromRecent = (result) => {\n    if (!currentUser) {\n      navigate('/login', { state: { from: '/challenges', message: \"Please login to challenge a friend.\" } });\n      return;\n    }\n    if (!result.questionsActuallyAttemptedIds || result.questionsActuallyAttemptedIds.length === 0) {\n      alert(\"Cannot initiate challenge: This result has no question data.\");\n      return;\n    }\n    setQuizDataForChallenge({\n      topicId: result.topicId,\n      topicName: result.topicName,\n      difficulty: result.difficulty,\n      numQuestions: result.questionsActuallyAttemptedIds.length,\n      quizClass: result.class,\n      questionIds: result.questionsActuallyAttemptedIds,\n      subject: result.subject\n    });\n    setChallengeSetupModalOpen(true);\n  };\n  \n  const handleCloseChallengeSetupModal = () => {\n      setChallengeSetupModalOpen(false);\n      setQuizDataForChallenge(null);\n  }\n\n  const handleStartChallenge = (challenge) => {\n    navigate(`/quiz/challenge-${challenge.id}`, {\n      state: {\n        quizType: 'challenge',\n        challengeId: challenge.id,\n        topicId: challenge.topic_id,\n        topicName: challenge.topic_name || `Challenge #${challenge.id}`,\n        difficulty: challenge.difficulty,\n        numQuestions: challenge.num_questions,\n        quizClass: challenge.quiz_class,\n        questionIds: challenge.question_ids_json ? JSON.parse(challenge.question_ids_json) : null,\n        subject: challenge.subject || challenge.topic_id.split('-')[0] || 'challenge',\n        timeLimit: challenge.time_limit || null,\n        currentChallengeDetails: challenge\n      }\n    });\n  };\n\n  // --- Return all state and handlers ---\n  return {\n    // Data and states\n    recentResults,\n    isLoadingRecentResults,\n    recentResultsError,\n    pendingReceivedChallenges,\n    isLoadingPending,\n    pendingError,\n    challengeSetupModalOpen,\n    quizDataForChallenge,\n    // Handlers\n    handleOpenChallengeSetupFromRecent,\n    handleCloseChallengeSetupModal,\n    handleStartChallenge\n  };\n};","// src/components/results/HistoricalResultItem.js\nimport { Paper, Box, Typography, Chip, IconButton, useTheme, alpha, Stack, Tooltip } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SportsKabaddiIcon from '@mui/icons-material/SportsKabaddi';\nimport { useNavigate } from 'react-router-dom';\nimport { subjectAccentColors } from '../../theme';\nimport { formatDisplayTopicName } from '../../utils/quizUtils';\n\nfunction HistoricalResultItem({ result, onDeleteClick, showDeleteButton, isChallengeResult }) {\n  const theme = useTheme();\n  const navigate = useNavigate();\n\n  if (!result) {\n    return null;\n  }\n\n  const topicName = formatDisplayTopicName(result.topicId, result.topicName, isChallengeResult, result);\n  const itemAccentColor = subjectAccentColors[result.subject?.toLowerCase()] || theme.palette.grey[700];\n\n  const handleResultClick = () => {\n    if (result && result.id) {\n      navigate(`/results/${result.id}`);\n    }\n  };\n\n  // Helper function to get more vibrant chip styles\n  const getVibrantChipStyles = (percentage) => {\n    if (percentage >= 70) {\n      return {\n        backgroundColor: theme.palette.success.main,\n        color: theme.palette.getContrastText(theme.palette.success.main),\n      };\n    }\n    if (percentage >= 50) {\n      return {\n        backgroundColor: theme.palette.warning.main,\n        color: theme.palette.getContrastText(theme.palette.warning.main),\n      };\n    }\n    return {\n      backgroundColor: theme.palette.error.main,\n      color: theme.palette.getContrastText(theme.palette.error.main),\n    };\n  };\n\n  return (\n    <Paper\n      onClick={handleResultClick}\n      sx={{\n        p: 1.5,\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: 2,\n        borderLeft: `4px solid ${itemAccentColor}`,\n        cursor: 'pointer',\n        transition: 'transform 0.2s, box-shadow 0.2s',\n        '&:hover': {\n          transform: 'translateY(-3px)',\n          boxShadow: theme.shadows[5],\n          backgroundColor: alpha(theme.palette.action.hover, 0.06)\n        },\n      }}\n      elevation={2}\n    >\n      <Box sx={{ flexGrow: 1 }}>\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\" sx={{ mb: 1 }}>\n          {isChallengeResult && <SportsKabaddiIcon sx={{ color: itemAccentColor, fontSize: '1rem' }} />}\n          <Typography variant=\"subtitle1\" sx={{ textTransform: 'capitalize', fontWeight: 500, color: itemAccentColor, lineHeight: 1.2, flexGrow: 1 }}>\n            {topicName}\n          </Typography>\n        </Stack>\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5, alignItems: 'center' }}>\n          {result.class && <Chip label={`Class ${result.class}`} size=\"small\" variant=\"outlined\" sx={{ fontSize: '0.7rem', height: '18px' }} />}\n          {result.difficulty && <Chip label={result.difficulty} size=\"small\" variant=\"outlined\" sx={{ textTransform: 'capitalize', fontSize: '0.7rem', height: '18px' }} />}\n          {/* UPDATED: Date is now a chip */}\n          <Chip label={new Date(result.timestamp).toLocaleDateString()} size=\"small\" variant=\"outlined\" sx={{ fontSize: '0.7rem', height: '18px' }}/>\n        </Box>\n      </Box>\n\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mt: 1.5, pt: 1, borderTop: `1px solid ${theme.palette.divider}` }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n          {/* REMOVED: TimerIcon is gone */}\n          <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n            {result.score}/{result.totalQuestions}\n          </Typography>\n        </Box>\n\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Chip\n            label={`${result.percentage}%`}\n            sx={{\n              fontWeight: 'bold',\n              fontSize: '0.9rem',\n              height: '26px',\n              ...getVibrantChipStyles(result.percentage) // UPDATED: More vibrant colors\n            }}\n          />\n          {showDeleteButton && onDeleteClick && (\n            <Tooltip title=\"Delete Result\">\n              <IconButton size=\"small\" onClick={(e) => { e.stopPropagation(); onDeleteClick(result.id); }} sx={{ color: theme.palette.error.light, '&:hover': { backgroundColor: alpha(theme.palette.error.main, 0.2) } }}>\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Box>\n      </Stack>\n    </Paper>\n  );\n}\n\nexport default HistoricalResultItem;","// src/utils/quizUtils.js\n\n/**\n * Parses the 'options' field of question objects within an array.\n * If 'options' is a JSON string, it's parsed into an array.\n * If it's already an array, it's returned as is.\n * Handles potential parsing errors.\n * @param {Array<Object>} questionsArray - An array of question objects.\n * @returns {Array<Object>} The array of question objects with 'options' as arrays.\n */\nexport const parseQuestionOptions = (questionsArray) => {\n  if (!Array.isArray(questionsArray)) {\n    console.warn(\"[quizUtils] parseQuestionOptions received non-array input:\", questionsArray);\n    return [];\n  }\n  return questionsArray.map(q => {\n    if (!q || typeof q !== 'object') {\n        console.warn(\"[quizUtils] Encountered invalid item in questionsArray:\", q);\n        return q;\n    }\n    let parsedOptions = [];\n    if (typeof q.options === 'string') {\n      try {\n        parsedOptions = JSON.parse(q.options);\n        if (!Array.isArray(parsedOptions)) {\n            console.warn(`[quizUtils] Parsed options for Q ID ${q.id} is not an array:`, parsedOptions);\n            parsedOptions = [];\n        }\n      } catch (e) {\n        console.error(`[quizUtils] Failed to parse options for question ID ${q.id}:`, q.options, e);\n      }\n    } else if (Array.isArray(q.options)) {\n      parsedOptions = q.options;\n    } else if (q.options !== undefined && q.options !== null) {\n      console.warn(`[quizUtils] Question ID ${q.id} has unexpected options format (not string or array):`, q.options);\n    }\n    return { ...q, options: parsedOptions };\n  });\n};\n\n/**\n * Formats a topic name for display based on its ID and other optional details.\n * @param {string} topicId - The ID of the topic.\n * @param {string|null} topicNameFromState - A pre-formatted name, if available.\n * @param {boolean} isChallenge - Whether this is for a challenge result.\n * @param {Object|null} challengeDetails - Details of the challenge, if applicable.\n * @returns {string} The formatted topic name.\n */\nexport const formatDisplayTopicName = (topicId, topicNameFromState = null, isChallenge = false, challengeDetails = null) => {\n  // ... (your existing formatDisplayTopicName logic from previous step)\n  if (isChallenge && challengeDetails?.topic_name) return `Challenge: ${challengeDetails.topic_name}`;\n  if (isChallenge && topicNameFromState) return `Challenge: ${topicNameFromState}`;\n  if (isChallenge) return `Challenge: ${topicId ? String(topicId).replace(/-/g, ' ') : 'Quiz'}`;\n  if (topicNameFromState && topicId && topicNameFromState !== String(topicId).replace(/-/g, ' ')) { return topicNameFromState; }\n  if (!topicId) return 'N/A';\n  let name = String(topicId).replace(/-/g, ' ');\n  name = name.replace(/^homibhabha practice /i, 'Homi Bhabha Practice - ');\n  name = name.replace(/^pyq /i, 'PYQ ');\n  const classSuffixRegex = /\\s(\\d+(?:st|nd|rd|th))$/i;\n  name = name.replace(classSuffixRegex, (match, p1) => ` - Class ${p1.toUpperCase()}`).trim();\n  name = name.split(' ').map(word => {\n    if (word.toLowerCase() === 'class' || word.toLowerCase() === 'std') return word;\n    if (word.includes('-')) { return word.split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()).join('-'); }\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); }).join(' ');\n  name = name.replace(/Homi Bhabha Practice - (\\w+) (\\w+)/i, (match, quizClass, difficulty) => `Homi Bhabha Practice - Std ${quizClass} (${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)})`);\n  name = name.replace(/Pyq (\\w+) (\\d+)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  name = name.replace(/Pyq - Class (\\w+) \\((\\d+)\\)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  return name;\n};\n\n/**\n * Shuffles an array in place using the Fisher-Yates algorithm.\n * @param {Array} array - The array to shuffle.\n * @returns {Array} The shuffled array (same instance, modified in place, but also returned).\n */\nexport const shuffleArray = (array) => {\n  if (!array || !Array.isArray(array)) return [];\n  let currentIndex = array.length, randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex !== 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n  return array; // Returns the same array instance, now shuffled\n};"],"names":["_ref","_quizDataForChallenge","open","onClose","currentUser","quizDataForChallenge","accentColor","theme","useTheme","friendsList","setFriendsList","useState","isLoadingFriends","setIsLoadingFriends","selectedFriendId","setSelectedFriendId","error","setError","successMessage","setSuccessMessage","isSubmitting","setIsSubmitting","effectiveAccentColor","palette","secondary","main","fetchFriends","useCallback","async","token","response","apiClient","get","headers","Authorization","concat","data","err","console","useEffect","_jsxs","Dialog","PaperProps","sx","minWidth","maxWidth","children","_jsx","DialogTitle","backgroundColor","color","getContrastText","pb","pt","DialogContent","display","flexDirection","gap","Typography","variant","gutterBottom","Box","pl","borderLeft","mb","topicName","difficulty","questionIds","length","quizClass","subject","CircularProgress","alignSelf","FormControl","fullWidth","margin","disabled","InputLabel","id","Select","labelId","value","label","onChange","e","target","MenuProps","background","paper","MenuItem","map","friend","friendId","friendUsername","Alert","severity","mt","DialogActions","p","Button","onClick","payload","challenged_friend_id","topic_id","topicId","topic_name","num_questions","quiz_class","question_ids_json","JSON","stringify","post","message","setTimeout","_err$response","_err$response$data","darken","startIcon","size","SportsKabaddiIcon","createSvgIcon","d","results","isLoading","onInitiateChallenge","showAll","setShowAll","mx","my","opacity","List","dense","slice","result","HistoricalResultItem","onResultClick","showDeleteButton","justifyContent","formatChallengeTopicName","name","charAt","toUpperCase","challenges","onPlayChallenge","currentUserId","challenge","_challenge$subject","statusText","status","statusColor","chipVariant","Paper","elevation","themeSubjectAccentColors","toLowerCase","grey","Grid","container","spacing","alignItems","item","xs","sm","textTransform","fontWeight","challengerUsername","Date","created_at","toLocaleDateString","expires_at","direction","Chip","challenged_id","renderChallengeItem","_theme$palette$challe","navigate","useNavigate","isLoadingAuth","useAuth","CHALLENGES_ACCENT_COLOR","challengesAccent","recentResults","isLoadingRecentResults","recentResultsError","pendingReceivedChallenges","isLoadingPending","pendingError","challengeSetupModalOpen","handleOpenChallengeSetupFromRecent","handleCloseChallengeSetupModal","handleStartChallenge","setRecentResults","setIsLoadingRecentResults","setRecentResultsError","setPendingReceivedChallenges","setIsLoadingPending","setPendingError","setChallengeSetupModalOpen","setQuizDataForChallenge","fetchRecentResults","fetchPendingChallengeData","pendingRes","_err$response2","_err$response2$data","questionsActuallyAttemptedIds","numQuestions","class","alert","state","from","quizType","challengeId","parse","split","timeLimit","time_limit","currentChallengeDetails","useChallenges","minHeight","ml","md","textAlign","verticalAlign","mr","fontSize","RecentAttemptsForChallenge","Divider","IncomingChallengesList","ChallengeSetupModal","borderTop","_result$subject","onDeleteClick","isChallengeResult","formatDisplayTopicName","itemAccentColor","subjectAccentColors","handleResultClick","height","borderRadius","cursor","transition","transform","boxShadow","shadows","alpha","action","hover","flexGrow","Stack","lineHeight","flexWrap","timestamp","divider","score","totalQuestions","percentage","_objectSpread","success","warning","Tooltip","title","IconButton","stopPropagation","light","DeleteIcon","parseQuestionOptions","questionsArray","Array","isArray","q","warn","parsedOptions","options","undefined","topicNameFromState","arguments","isChallenge","challengeDetails","String","replace","match","p1","trim","word","includes","part","join","year","shuffleArray","array","randomIndex","currentIndex","Math","floor","random"],"sourceRoot":""}