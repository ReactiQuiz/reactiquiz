{"version":3,"file":"static/js/994.31034b77.chunk.js","mappings":"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","sources":["components/shared/MarkdownRenderer.js","utils/formatTime.js","hooks/useQuiz.js","../node_modules/@mui/icons-material/esm/Replay.js","components/quiz/QuizHeader.js","components/quiz/QuestionItem.js","components/quiz/QuizQuestionList.js","pages/QuizPage.js","utils/quizUtils.js"],"sourcesContent":["// src/components/shared/MarkdownRenderer.js\r\nimport React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkMath from 'remark-math';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport { Typography, Link as MuiLink } from '@mui/material';\r\n\r\n// This component will render markdown text and correctly format LaTeX math blocks.\r\nfunction MarkdownRenderer({ text }) {\r\n    if (!text) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ReactMarkdown\r\n            remarkPlugins={[remarkMath]}\r\n            rehypePlugins={[rehypeKatex]}\r\n            components={{\r\n                p: ({ node, ...props }) => <Typography variant=\"inherit\" component=\"div\" sx={{ mt: 1, mb: 1 }} {...props} />,\r\n                a: ({ node, ...props }) => <MuiLink {...props} />,\r\n                // Add more custom components for other markdown elements if needed\r\n            }}\r\n        >\r\n            {text}\r\n        </ReactMarkdown>\r\n    );\r\n}\r\n\r\nexport default MarkdownRenderer;","// src/utils/formatTime.js\nexport const formatTime = (totalSeconds) => {\n  if (totalSeconds == null || typeof totalSeconds !== 'number' || totalSeconds < 0) {\n    return 'N/A';\n  }\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = Math.floor(totalSeconds % 60);\n\n  const paddedHours = String(hours).padStart(2, '0');\n  const paddedMinutes = String(minutes).padStart(2, '0');\n  const paddedSeconds = String(seconds).padStart(2, '0');\n\n  if (hours > 0) {\n    return `${paddedHours}h ${paddedMinutes}m ${paddedSeconds}s`;\n  }\n  if (minutes > 0) {\n    return `${paddedMinutes}m ${paddedSeconds}s`;\n  }\n  return `${paddedSeconds}s`;\n};","// src/hooks/useQuiz.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport apiClient from '../api/axiosInstance';\nimport { useAuth } from '../contexts/AuthContext';\nimport { parseQuestionOptions, shuffleArray } from '../utils/quizUtils';\n\n// Helper to generate a URL-safe, secure random string\nconst generateSecureRandomId = (length = 16) => {\n    const array = new Uint8Array(length);\n    window.crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('').slice(0, length);\n};\n\n\n// Helper functions (these are unchanged, provided for completeness)\nconst fetchAndFilterSubjectQuestionsForPractice = async (subjectName, targetClass, difficultyLabel, numQuestionsNeeded) => { try { const topicsResponse = await apiClient.get(`/api/topics/${subjectName.toLowerCase()}`); if (!Array.isArray(topicsResponse.data) || topicsResponse.data.length === 0) return []; const subjectTopicIds = topicsResponse.data.map(topic => topic.id); if (subjectTopicIds.length === 0) return []; let allQuestionsForSubject = []; for (const topicId of subjectTopicIds) { const questionsResponse = await apiClient.get(`/api/questions?topicId=${topicId}`); if (Array.isArray(questionsResponse.data)) { const correctTopicInfo = topicsResponse.data.find(t => t.id === topicId); allQuestionsForSubject.push(...questionsResponse.data.map(q => ({ ...q, subject: subjectName.toLowerCase(), class: q.class || correctTopicInfo?.class || null }))); } } if (allQuestionsForSubject.length === 0) return []; let classFiltered = targetClass ? allQuestionsForSubject.filter(q => !q.class || String(q.class) === String(targetClass)) : allQuestionsForSubject; if (classFiltered.length === 0 && targetClass) classFiltered = allQuestionsForSubject; if (difficultyLabel === 'mixed') return shuffleArray(classFiltered).slice(0, numQuestionsNeeded); let minScore = 0, maxScore = Infinity; if (difficultyLabel === 'easy') { minScore = 10; maxScore = 13; } else if (difficultyLabel === 'medium') { minScore = 14; maxScore = 17; } else if (difficultyLabel === 'hard') { minScore = 18; maxScore = 20; } let difficultyFiltered = classFiltered.filter(q => q.difficulty >= minScore && q.difficulty <= maxScore); if (difficultyFiltered.length === 0) difficultyFiltered = classFiltered; return shuffleArray(difficultyFiltered).slice(0, numQuestionsNeeded); } catch (error) { console.error(`[PracticeQuiz] Error fetching for ${subjectName}:`, error); return []; } };\nconst fetchHomiBhabhaPracticeQuestions = async (settings) => { const { quizClassFromState, difficultyLabel, questionComposition, desiredTotal } = settings; let finalQuizQuestions = [], infoMessages = []; for (const subjKey of ['physics', 'chemistry', 'biology', 'gk']) { if (questionComposition[subjKey]) { const fetched = await fetchAndFilterSubjectQuestionsForPractice(subjKey, quizClassFromState, difficultyLabel, questionComposition[subjKey]); finalQuizQuestions.push(...fetched); if (fetched.length < questionComposition[subjKey]) infoMessages.push(`Found ${fetched.length}/${questionComposition[subjKey]} ${subjKey} questions.`); } } const uniqueQuestions = Array.from(new Map(finalQuizQuestions.map(q => [q.id, q])).values()); if (uniqueQuestions.length === 0) throw new Error(\"Could not gather any questions for the practice test.\"); return { questions: shuffleArray(uniqueQuestions).slice(0, desiredTotal), info: infoMessages.join(' ') }; };\nconst fetchTopicQuestions = async (settings) => { const { topicId, quizClassFromState, difficultyLabel, numQuestionsReq, subject } = settings; const response = await apiClient.get(`/api/questions?topicId=${topicId}`); let questions = response.data; if (!Array.isArray(questions)) throw new Error(\"Invalid question data received.\"); if (quizClassFromState && subject && !['gk', 'mathematics'].includes(subject.toLowerCase())) { questions = questions.filter(q => !q.class || String(q.class) === String(quizClassFromState)); } if (difficultyLabel !== 'mixed') { let minScore = 0, maxScore = Infinity; if (difficultyLabel === 'easy') { minScore = 10; maxScore = 13; } else if (difficultyLabel === 'medium') { minScore = 14; maxScore = 17; } else if (difficultyLabel === 'hard') { minScore = 18; maxScore = 20; } const difficultyFiltered = questions.filter(q => q.difficulty >= minScore && q.difficulty <= maxScore); if (difficultyFiltered.length > 0) questions = difficultyFiltered; } if (questions.length === 0) throw new Error(`No questions found for topic \"${topicId}\" with the selected filters.`); return shuffleArray(questions).slice(0, numQuestionsReq); };\nconst fetchChallengeQuestions = async (challengeId, token) => { const response = await apiClient.get(`/api/challenges/${challengeId}`, { headers: { Authorization: `Bearer ${token}` } }); if (!response.data || !Array.isArray(response.data.question_ids)) throw new Error('Challenge data is invalid.'); const topicQuestionsResponse = await apiClient.get(`/api/questions?topicId=${response.data.topic_id}`); const allTopicQuestions = topicQuestionsResponse.data; if (!Array.isArray(allTopicQuestions)) throw new Error('Invalid question data for challenge topic.'); const questionDetails = response.data.question_ids.map(id => allTopicQuestions.find(q => q.id === id)).filter(Boolean); if (questionDetails.length === 0) throw new Error(\"No valid questions found for this challenge.\"); return { challengeData: response.data, questions: questionDetails.map(q => ({...q, subject: response.data.subject, class: response.data.quiz_class})) }; };\n\nexport const useQuiz = () => {\n  const { currentUser } = useAuth();\n  const { topicId: topicIdFromParams, challengeId: challengeIdFromParams } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const quizSettings = location.state || {};\n\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [infoMessage, setInfoMessage] = useState('');\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerActive, setTimerActive] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [quizContext, setQuizContext] = useState({});\n\n  const getStorageKey = useCallback(() => {\n    if (!currentUser?.id || (!topicIdFromParams && !challengeIdFromParams)) return null;\n    const key = challengeIdFromParams ? `challenge-${challengeIdFromParams}` : topicIdFromParams;\n    return `quiz-in-progress-${currentUser.id}-${key}`;\n  }, [currentUser?.id, topicIdFromParams, challengeIdFromParams]);\n\n  const clearQuizState = useCallback(() => {\n    const storageKey = getStorageKey();\n    if (storageKey) localStorage.removeItem(storageKey);\n  }, [getStorageKey]);\n\n  const submitAndNavigate = useCallback(async (abandon = false) => {\n    if (isSubmitting) return;\n    setTimerActive(false);\n    clearQuizState(); \n\n    if (abandon) {\n      navigate(quizContext.subject ? `/subjects/${quizContext.subject}` : '/subjects');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    let correctAnswers = 0;\n    questions.forEach(q => { if(userAnswers[q.id] === q.correctOptionId) correctAnswers++ });\n    const score = correctAnswers;\n    const percentage = questions.length > 0 ? Math.round((score / questions.length) * 100) : 0;\n    \n    let resultId = null;\n    if (currentUser?.token) {\n        try {\n            const resultPayload = {\n                userId: currentUser.id, subject: quizContext.subject, topicId: quizContext.topicId, score,\n                totalQuestions: questions.length, percentage, timestamp: new Date().toISOString(),\n                difficulty: quizContext.difficulty, numQuestionsConfigured: quizContext.numQuestions,\n                class: quizContext.quizClass, timeTaken: elapsedTime,\n                questionsActuallyAttemptedIds: questions.map(q => q.id),\n                userAnswersSnapshot: userAnswers, challenge_id: quizContext.challengeId || null\n            };\n            const response = await apiClient.post('/api/results', resultPayload, { headers: { Authorization: `Bearer ${currentUser.token}` } });\n            resultId = response.data.id;\n            if (quizContext.challengeId && resultId) {\n                await apiClient.put(`/api/challenges/${quizContext.challengeId}/submit`, { score, percentage, timeTaken: elapsedTime, resultId }, { headers: { Authorization: `Bearer ${currentUser.token}` } });\n            }\n        } catch (err) { console.error(\"Failed to save result/submit challenge score\", err); }\n    }\n    \n    // --- FIX IS HERE ---\n    // Generate a secure random ID for local/non-persistent results.\n    // Use the saved resultId if available, otherwise generate a new random one.\n    const finalResultId = resultId || generateSecureRandomId();\n\n    navigate(`/results/${finalResultId}`, { state: { \n        ...quizContext, originalQuestionsForDisplay: questions, originalAnswersForDisplay: userAnswers,\n        score, percentage, savedToHistory: !!resultId, isFirstResultView: true,\n    }});\n\n  }, [isSubmitting, userAnswers, questions, navigate, currentUser, quizContext, elapsedTime, clearQuizState]);\n\n  useEffect(() => {\n    const storageKey = getStorageKey();\n    const fetchQuizData = async () => {\n        setIsLoading(true);\n        setError(''); setInfoMessage('');\n        \n        if (storageKey) {\n            const savedStateJSON = localStorage.getItem(storageKey);\n            if (savedStateJSON) {\n                try {\n                    const savedState = JSON.parse(savedStateJSON);\n                    setQuestions(savedState.questions);\n                    setUserAnswers(savedState.userAnswers);\n                    setElapsedTime(savedState.elapsedTime);\n                    setQuizContext(savedState.quizContext);\n                    setTimerActive(true);\n                    setIsLoading(false);\n                    return;\n                } catch (e) {\n                    localStorage.removeItem(storageKey);\n                }\n            }\n        }\n\n        try {\n            const quizType = quizSettings.quizType || (challengeIdFromParams ? 'challenge' : 'standard');\n            let rawQuestions = [];\n            let context = {};\n\n            if (quizType === 'challenge' && challengeIdFromParams) { if (!currentUser?.token) throw new Error(\"You must be logged in to play a challenge.\"); const { challengeData, questions: fetched } = await fetchChallengeQuestions(challengeIdFromParams, currentUser.token); rawQuestions = fetched; context = { ...challengeData, topicName: challengeData.topic_name, quizClass: challengeData.quiz_class, challengeId: challengeData.id, numQuestionsConfigured: challengeData.num_questions }; } \n            else if (quizType === 'homibhabha-practice') { const { questions: fetched, info } = await fetchHomiBhabhaPracticeQuestions({ quizClassFromState: quizSettings.quizClass, difficultyLabel: quizSettings.difficulty, questionComposition: quizSettings.questionComposition, desiredTotal: quizSettings.totalQuestions }); rawQuestions = fetched; if (info) setInfoMessage(info); context = { ...quizSettings, topicId: `homibhabha-practice-${quizSettings.quizClass}-${quizSettings.difficulty}` }; } \n            else if (topicIdFromParams) { rawQuestions = await fetchTopicQuestions({ topicId: topicIdFromParams, quizClassFromState: quizSettings.quizClass, difficultyLabel: quizSettings.difficulty, numQuestionsReq: quizSettings.numQuestions, subject: quizSettings.subject }); context = { ...quizSettings, topicId: topicIdFromParams }; } \n            else { throw new Error(\"Quiz configuration is missing or invalid.\"); }\n            \n            const parsedQuestions = parseQuestionOptions(rawQuestions);\n            setQuestions(parsedQuestions);\n            setQuizContext(context);\n            setUserAnswers({});\n            setElapsedTime(0);\n\n            if (rawQuestions.length > 0) {\n              setTimerActive(true);\n              if (storageKey) {\n                const initialState = { questions: parsedQuestions, userAnswers: {}, elapsedTime: 0, quizContext: context };\n                localStorage.setItem(storageKey, JSON.stringify(initialState));\n              }\n            }\n        } catch (err) {\n            setError(`Failed to load quiz: ${err.message || 'Unknown error'}`);\n        }\n        setIsLoading(false);\n    };\n    fetchQuizData();\n    // eslint-disable-next-line\n  }, [topicIdFromParams, challengeIdFromParams, location.state, currentUser, getStorageKey]);\n\n  useEffect(() => {\n    let interval;\n    if (timerActive && questions.length > 0) {\n        interval = setInterval(() => {\n            setElapsedTime(prev => {\n                const newTime = prev + 1;\n                const storageKey = getStorageKey();\n                if (storageKey) {\n                    try {\n                        const savedState = JSON.parse(localStorage.getItem(storageKey) || '{}');\n                        savedState.elapsedTime = newTime;\n                        localStorage.setItem(storageKey, JSON.stringify(savedState));\n                    } catch(e) { /* ignore write errors */ }\n                }\n                if(quizContext.timeLimit && newTime >= quizContext.timeLimit) {\n                    clearInterval(interval);\n                    submitAndNavigate();\n                    return quizContext.timeLimit;\n                }\n                return newTime;\n            });\n        }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [timerActive, questions.length, quizContext.timeLimit, submitAndNavigate, getStorageKey]);\n\n  const handleOptionSelect = (questionId, selectedOptionId) => {\n    const newAnswers = { ...userAnswers, [questionId]: selectedOptionId };\n    setUserAnswers(newAnswers);\n    const storageKey = getStorageKey();\n    if(storageKey) {\n        try {\n            const savedState = JSON.parse(localStorage.getItem(storageKey) || '{}');\n            savedState.userAnswers = newAnswers;\n            localStorage.setItem(storageKey, JSON.stringify(savedState));\n        } catch(e) { /* ignore write errors */ }\n    }\n  };\n\n  const handleAbandonQuiz = () => {\n    if (window.confirm(\"Are you sure you want to abandon this quiz? Your progress will be lost and you will be returned to the topics list.\")) {\n      submitAndNavigate(true);\n    }\n  }\n\n  return {\n      questions, userAnswers, isLoading, error, infoMessage, elapsedTime,\n      timerActive, isSubmitting, quizContext, handleOptionSelect,\n      submitAndNavigate, handleAbandonQuiz\n  };\n};","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8\"\n}), 'Replay');","// src/components/quiz/QuizHeader.js\nimport React from 'react';\nimport { Box, Typography, useTheme, alpha, Alert, Button } from '@mui/material';\nimport { formatTime } from '../../utils/formatTime';\nimport ReplayIcon from '@mui/icons-material/Replay';\n\nfunction QuizHeader({\n  quizType,\n  effectiveSubject,\n  effectiveTopicName,\n  effectiveQuizClass,\n  effectiveDifficulty,\n  questionsLength,\n  currentChallengeDetails,\n  currentUser,\n  timerActive,\n  elapsedTime,\n  effectiveTimeLimit,\n  accentColor,\n  infoMessage,\n  onAbandon // New prop for abandoning the quiz\n}) {\n  const theme = useTheme();\n  const effectiveAccentColor = accentColor || theme.palette.primary.main;\n\n  const displayTime = effectiveTimeLimit ? Math.max(0, effectiveTimeLimit - elapsedTime) : elapsedTime;\n\n  const baseTimerColorForAlpha = effectiveTimeLimit && displayTime < 600\n    ? theme.palette.error.main\n    : theme.palette.text.primary;\n  const timerDisplayTextColor = effectiveTimeLimit && displayTime < 600\n    ? theme.palette.error.main\n    : theme.palette.text.primary;\n\n  const getQuizTitle = () => {\n    if (quizType === 'challenge' && currentChallengeDetails) { return `Challenge: ${currentChallengeDetails.topic_name || currentChallengeDetails.topic_id?.replace(/-/g, ' ') || 'Quiz'}`; }\n    if (effectiveSubject) { return `${effectiveSubject.charAt(0).toUpperCase() + effectiveSubject.slice(1)} Quiz`; }\n    return 'Quiz';\n  };\n\n  const getQuizSubHeader = () => {\n    let subHeaderParts = [];\n    if (quizType !== 'challenge') { subHeaderParts.push(`Topic: ${effectiveTopicName}`); }\n    else if (currentChallengeDetails) {\n      const challengedByText = currentChallengeDetails.challenger_id === currentUser?.id ? (currentChallengeDetails.challengedUsername ? `You challenged ${currentChallengeDetails.challengedUsername}` : 'Awaiting opponent') : (currentChallengeDetails.challengerUsername || 'A User');\n      subHeaderParts.push(`Challenged by: ${challengedByText}`);\n    }\n    if (effectiveQuizClass) subHeaderParts.push(`(Class ${effectiveQuizClass})`);\n    if (effectiveDifficulty) subHeaderParts.push(effectiveDifficulty.charAt(0).toUpperCase() + effectiveDifficulty.slice(1));\n    if (questionsLength > 0) subHeaderParts.push(`${questionsLength} Questions`);\n    return subHeaderParts.join(' ');\n  };\n\n  return (\n    <>\n      <Box sx={{\n        position: 'fixed', top: { xs: `calc(56px + ${theme.spacing(1)})`, sm: `calc(64px + ${theme.spacing(1)})` },\n        left: '50%', transform: 'translateX(-50%)', backgroundColor: alpha(theme.palette.background.paper, 0.95),\n        color: timerDisplayTextColor, padding: theme.spacing(0.75, 2), borderRadius: theme.shape.borderRadius,\n        zIndex: 1050, boxShadow: theme.shadows[3], minWidth: '100px', textAlign: 'center',\n        border: `1px solid ${alpha(baseTimerColorForAlpha, 0.5)}`,\n        display: (timerActive || elapsedTime > 0) && questionsLength > 0 ? 'block' : 'none'\n      }}>\n        <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 500, lineHeight: 1.2, fontSize: '1rem' }}>\n          {effectiveTimeLimit ? 'Time Left: ' : 'Time: '} {formatTime(displayTime)}\n        </Typography>\n      </Box>\n\n      {infoMessage && <Alert severity=\"info\" sx={{ my: 2, mt: 8 }}>{infoMessage}</Alert>}\n\n      <Typography variant=\"h4\" gutterBottom component=\"div\" sx={{\n        mb: 1, textAlign: 'center', color: effectiveAccentColor, fontWeight: 'bold',\n        fontSize: { xs: '1.8rem', sm: '2.125rem' },\n        mt: !infoMessage && ((timerActive || elapsedTime > 0) && questionsLength > 0) ? 8 : (timerActive || elapsedTime > 0 ? 1 : 4.5)\n      }}>\n        {getQuizTitle()}\n      </Typography>\n      <Typography variant=\"h6\" component=\"div\" sx={{\n        mb: 2, textAlign: 'center', color: theme.palette.text.secondary, fontWeight: 'normal',\n        textTransform: 'capitalize', fontSize: { xs: '1rem', sm: '1.125rem' }\n      }}>\n        {getQuizSubHeader()}\n      </Typography>\n      \n      {onAbandon && (\n          <Box sx={{display: 'flex', justifyContent: 'center', mb: 2}}>\n              <Button onClick={onAbandon} variant=\"text\" color=\"error\" size=\"small\" startIcon={<ReplayIcon/>}>\n                  Abandon & Start Over\n              </Button>\n          </Box>\n      )}\n\n      {quizType === 'challenge' && currentChallengeDetails?.challenger_id !== currentUser?.id && currentChallengeDetails?.challenger_score !== null && (\n          <Alert severity=\"info\" sx={{mb: 2}}>\n              Your opponent {currentChallengeDetails.challengerUsername || 'has'} already completed this challenge, scoring {currentChallengeDetails.challenger_score}/{currentChallengeDetails.num_questions}. Good luck!\n          </Alert>\n      )}\n    </>\n  );\n}\n\nexport default QuizHeader;","// src/components/quiz/QuestionItem.js\nimport { Box, Typography, Button, Paper, useTheme } from '@mui/material';\nimport { alpha, darken } from '@mui/material/styles';\nimport MarkdownRenderer from '../shared/MarkdownRenderer'; // <-- IMPORT\n\nconst QuestionItem = ({ question, questionNumber, onOptionSelect, selectedOptionId, accentColor }) => {\n  const theme = useTheme();\n  const effectiveAccentColor = accentColor || theme.palette.primary.main;\n\n  return (\n    <Paper elevation={2} sx={{ p: { xs: 2, sm: 3 }, mb: 3, width: '100%', borderRadius: 2 }}>\n      <Typography variant=\"h6\" gutterBottom component=\"div\" sx={{ color: theme.palette.text.secondary, fontWeight: 500 }}>\n        Question {questionNumber}:\n      </Typography>\n\n      {/* --- START OF FIX --- */}\n      <Box sx={{ mb: 2.5, color: theme.palette.text.primary, fontSize: '1.1rem' }}>\n        <MarkdownRenderer text={question.text} />\n      </Box>\n      {/* --- END OF FIX --- */}\n\n      <Box display=\"flex\" flexDirection=\"column\" gap={1.5}>\n        {question.options.map((option) => {\n          const isSelected = option.id === selectedOptionId;\n          return (\n            <Button\n              key={option.id}\n              variant={isSelected ? \"contained\" : \"outlined\"}\n              fullWidth\n              onClick={() => onOptionSelect(question.id, option.id)}\n              sx={{\n                justifyContent: 'flex-start',\n                textAlign: 'left',\n                py: 1.5,\n                px: 2,\n                borderRadius: '8px',\n                borderColor: alpha(effectiveAccentColor, 0.5),\n                color: isSelected\n                  ? theme.palette.getContrastText(effectiveAccentColor)\n                  : theme.palette.text.primary,\n                backgroundColor: isSelected\n                  ? effectiveAccentColor\n                  : 'transparent',\n                '&:hover': {\n                  borderColor: effectiveAccentColor,\n                  backgroundColor: isSelected\n                    ? darken(effectiveAccentColor, 0.15)\n                    : alpha(effectiveAccentColor, 0.08),\n                },\n                textTransform: 'none',\n                fontSize: '1rem',\n                lineHeight: 1.5,\n                fontWeight: isSelected ? 500 : 400,\n              }}\n            >\n              {/* Also render options with the renderer */}\n              <MarkdownRenderer text={option.text} />\n            </Button>\n          );\n        })}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default QuestionItem;","// src/components/quiz/QuizQuestionList.js\nimport React from 'react';\nimport QuestionItem from './QuestionItem'; // Assuming QuestionItem is in the same folder\n\nfunction QuizQuestionList({\n  questions,\n  userAnswers,\n  onOptionSelect,\n  currentAccentColor,\n}) {\n  if (!questions || questions.length === 0) {\n    return null; // Or some placeholder if needed, but parent usually handles empty state\n  }\n\n  return (\n    <>\n      {questions.map((question, index) => (\n        <QuestionItem\n          key={question.id || `q-${index}-${Math.random()}`}\n          question={question} // question.options here will be an array\n          questionNumber={index + 1}\n          selectedOptionId={userAnswers[question.id]}\n          onOptionSelect={onOptionSelect}\n          accentColor={currentAccentColor}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default QuizQuestionList;","// src/pages/QuizPage.js\nimport { Box, Typography, Button, CircularProgress, Alert, Paper } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { darken, useTheme } from '@mui/material/styles';\n\nimport { useQuiz } from '../hooks/useQuiz';\nimport { useAuth } from '../contexts/AuthContext';\nimport { subjectAccentColors } from '../theme';\nimport QuizHeader from '../components/quiz/QuizHeader';\nimport QuizQuestionList from '../components/quiz/QuizQuestionList';\n\nfunction QuizPage() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  \n  const {\n    questions,\n    userAnswers,\n    isLoading,\n    error,\n    infoMessage,\n    elapsedTime,\n    timerActive,\n    isSubmitting,\n    quizContext,\n    handleOptionSelect,\n    submitAndNavigate,\n    handleAbandonQuiz\n  } = useQuiz();\n\n  const accentColor = subjectAccentColors[quizContext.subject?.toLowerCase()] || quizContext.accentColor || theme.palette.primary.main;\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n        <CircularProgress sx={{ color: accentColor }} />\n        <Typography sx={{ ml: 2 }}>Loading Quiz...</Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3, maxWidth: '900px', margin: 'auto', textAlign: 'center' }}>\n        <Alert severity=\"error\">{error}</Alert>\n        <Button variant=\"outlined\" onClick={() => navigate('/')} sx={{ mt: 2, borderColor: accentColor, color: accentColor }}>\n          Back to Home\n        </Button>\n      </Box>\n    );\n  }\n\n  if (!isLoading && questions.length === 0) {\n    return (\n      <Box sx={{ p: 3, maxWidth: '900px', margin: 'auto', textAlign: 'center' }}>\n        <Typography variant=\"h5\" gutterBottom>No Questions Available</Typography>\n        <Typography>No questions are currently available for the selected settings. Please try again.</Typography>\n        <Button variant=\"outlined\" onClick={() => navigate(quizContext.subject ? `/subjects/${quizContext.subject}` : '/subjects')} sx={{ mt: 3, borderColor: accentColor, color: accentColor }}>\n          Back to {quizContext.subject ? quizContext.subject.charAt(0).toUpperCase() + quizContext.subject.slice(1) : 'Subjects'}\n        </Button>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: { xs: 1, sm: 2, md: 3 }, maxWidth: '900px', margin: 'auto' }}>\n      <Paper elevation={3} sx={{ p: { xs: 2, sm: 3 }, mb: 3, borderTop: `4px solid ${accentColor}` }}>\n        <QuizHeader\n          quizType={quizContext.quizType}\n          effectiveSubject={quizContext.subject}\n          effectiveTopicName={quizContext.topicName}\n          effectiveQuizClass={quizContext.quizClass}\n          effectiveDifficulty={quizContext.difficulty}\n          questionsLength={questions.length}\n          currentChallengeDetails={quizContext.challengeId ? quizContext : null}\n          currentUser={currentUser}\n          timerActive={timerActive}\n          elapsedTime={elapsedTime}\n          effectiveTimeLimit={quizContext.timeLimit}\n          accentColor={accentColor}\n          infoMessage={infoMessage}\n          onAbandon={handleAbandonQuiz}\n        />\n      </Paper>\n\n      <QuizQuestionList\n        questions={questions}\n        userAnswers={userAnswers}\n        onOptionSelect={handleOptionSelect}\n        currentAccentColor={accentColor}\n      />\n\n      <Box display=\"flex\" justifyContent=\"center\" sx={{ mt: 3, mb: 4 }}>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          onClick={() => submitAndNavigate()}\n          disabled={isSubmitting || questions.length === 0}\n          sx={{\n            backgroundColor: accentColor,\n            color: theme.palette.getContrastText(accentColor),\n            '&:hover': { backgroundColor: darken(accentColor, 0.15) },\n            minWidth: '220px',\n            py: 1.5,\n            fontSize: '1.1rem'\n          }}\n        >\n          {isSubmitting ? <CircularProgress size={26} color=\"inherit\" /> : \"Submit Quiz\"}\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport default QuizPage;","// src/utils/quizUtils.js\n\n/**\n * Parses the 'options' field of question objects within an array.\n * If 'options' is a JSON string, it's parsed into an array.\n * If it's already an array, it's returned as is.\n * Handles potential parsing errors.\n * @param {Array<Object>} questionsArray - An array of question objects.\n * @returns {Array<Object>} The array of question objects with 'options' as arrays.\n */\nexport const parseQuestionOptions = (questionsArray) => {\n  if (!Array.isArray(questionsArray)) {\n    console.warn(\"[quizUtils] parseQuestionOptions received non-array input:\", questionsArray);\n    return [];\n  }\n  return questionsArray.map(q => {\n    if (!q || typeof q !== 'object') {\n        console.warn(\"[quizUtils] Encountered invalid item in questionsArray:\", q);\n        return q;\n    }\n    let parsedOptions = [];\n    if (typeof q.options === 'string') {\n      try {\n        parsedOptions = JSON.parse(q.options);\n        if (!Array.isArray(parsedOptions)) {\n            console.warn(`[quizUtils] Parsed options for Q ID ${q.id} is not an array:`, parsedOptions);\n            parsedOptions = [];\n        }\n      } catch (e) {\n        console.error(`[quizUtils] Failed to parse options for question ID ${q.id}:`, q.options, e);\n      }\n    } else if (Array.isArray(q.options)) {\n      parsedOptions = q.options;\n    } else if (q.options !== undefined && q.options !== null) {\n      console.warn(`[quizUtils] Question ID ${q.id} has unexpected options format (not string or array):`, q.options);\n    }\n    return { ...q, options: parsedOptions };\n  });\n};\n\n/**\n * Formats a topic name for display based on its ID and other optional details.\n * @param {string} topicId - The ID of the topic.\n * @param {string|null} topicNameFromState - A pre-formatted name, if available.\n * @param {boolean} isChallenge - Whether this is for a challenge result.\n * @param {Object|null} challengeDetails - Details of the challenge, if applicable.\n * @returns {string} The formatted topic name.\n */\nexport const formatDisplayTopicName = (topicId, topicNameFromState = null, isChallenge = false, challengeDetails = null) => {\n  // ... (your existing formatDisplayTopicName logic from previous step)\n  if (isChallenge && challengeDetails?.topic_name) return `Challenge: ${challengeDetails.topic_name}`;\n  if (isChallenge && topicNameFromState) return `Challenge: ${topicNameFromState}`;\n  if (isChallenge) return `Challenge: ${topicId ? String(topicId).replace(/-/g, ' ') : 'Quiz'}`;\n  if (topicNameFromState && topicId && topicNameFromState !== String(topicId).replace(/-/g, ' ')) { return topicNameFromState; }\n  if (!topicId) return 'N/A';\n  let name = String(topicId).replace(/-/g, ' ');\n  name = name.replace(/^homibhabha practice /i, 'Homi Bhabha Practice - ');\n  name = name.replace(/^pyq /i, 'PYQ ');\n  const classSuffixRegex = /\\s(\\d+(?:st|nd|rd|th))$/i;\n  name = name.replace(classSuffixRegex, (match, p1) => ` - Class ${p1.toUpperCase()}`).trim();\n  name = name.split(' ').map(word => {\n    if (word.toLowerCase() === 'class' || word.toLowerCase() === 'std') return word;\n    if (word.includes('-')) { return word.split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()).join('-'); }\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); }).join(' ');\n  name = name.replace(/Homi Bhabha Practice - (\\w+) (\\w+)/i, (match, quizClass, difficulty) => `Homi Bhabha Practice - Std ${quizClass} (${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)})`);\n  name = name.replace(/Pyq (\\w+) (\\d+)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  name = name.replace(/Pyq - Class (\\w+) \\((\\d+)\\)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  return name;\n};\n\n/**\n * Shuffles an array in place using the Fisher-Yates algorithm.\n * @param {Array} array - The array to shuffle.\n * @returns {Array} The shuffled array (same instance, modified in place, but also returned).\n */\nexport const shuffleArray = (array) => {\n  if (!array || !Array.isArray(array)) return [];\n  let currentIndex = array.length, randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex !== 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n  return array; // Returns the same array instance, now shuffled\n};"],"names":["_ref","text","_jsx","ReactMarkdown","remarkPlugins","remarkMath","rehypePlugins","rehypeKatex","components","p","_ref2","node","props","_objectWithoutProperties","_excluded","Typography","_objectSpread","variant","component","sx","mt","mb","a","_ref3","_excluded2","MuiLink","children","formatTime","totalSeconds","hours","Math","floor","minutes","seconds","paddedHours","String","padStart","paddedMinutes","paddedSeconds","concat","fetchAndFilterSubjectQuestionsForPractice","async","subjectName","targetClass","difficultyLabel","numQuestionsNeeded","topicsResponse","apiClient","get","toLowerCase","Array","isArray","data","length","subjectTopicIds","map","topic","id","allQuestionsForSubject","topicId","questionsResponse","correctTopicInfo","find","t","push","q","subject","class","classFiltered","filter","shuffleArray","slice","minScore","maxScore","Infinity","difficultyFiltered","difficulty","error","console","useQuiz","currentUser","useAuth","topicIdFromParams","challengeId","challengeIdFromParams","useParams","navigate","useNavigate","location","useLocation","quizSettings","state","questions","setQuestions","useState","userAnswers","setUserAnswers","isLoading","setIsLoading","setError","infoMessage","setInfoMessage","elapsedTime","setElapsedTime","timerActive","setTimerActive","isSubmitting","setIsSubmitting","quizContext","setQuizContext","getStorageKey","useCallback","key","clearQuizState","storageKey","localStorage","removeItem","submitAndNavigate","abandon","arguments","undefined","correctAnswers","forEach","correctOptionId","score","percentage","round","resultId","token","resultPayload","userId","totalQuestions","timestamp","Date","toISOString","numQuestionsConfigured","numQuestions","quizClass","timeTaken","questionsActuallyAttemptedIds","userAnswersSnapshot","challenge_id","post","headers","Authorization","put","err","finalResultId","array","Uint8Array","window","crypto","getRandomValues","from","byte","toString","join","generateSecureRandomId","originalQuestionsForDisplay","originalAnswersForDisplay","savedToHistory","isFirstResultView","useEffect","savedStateJSON","getItem","savedState","JSON","parse","e","quizType","rawQuestions","context","Error","challengeData","fetched","response","question_ids","allTopicQuestions","topic_id","questionDetails","Boolean","quiz_class","fetchChallengeQuestions","topicName","topic_name","num_questions","info","quizClassFromState","questionComposition","desiredTotal","settings","finalQuizQuestions","infoMessages","subjKey","uniqueQuestions","Map","values","fetchHomiBhabhaPracticeQuestions","numQuestionsReq","includes","fetchTopicQuestions","parsedQuestions","parseQuestionOptions","initialState","setItem","stringify","message","fetchQuizData","interval","setInterval","prev","newTime","timeLimit","clearInterval","handleOptionSelect","questionId","selectedOptionId","newAnswers","handleAbandonQuiz","confirm","createSvgIcon","d","effectiveSubject","effectiveTopicName","effectiveQuizClass","effectiveDifficulty","questionsLength","currentChallengeDetails","effectiveTimeLimit","accentColor","onAbandon","theme","useTheme","effectiveAccentColor","palette","primary","main","displayTime","max","baseTimerColorForAlpha","timerDisplayTextColor","_jsxs","_Fragment","Box","position","top","xs","spacing","sm","left","transform","backgroundColor","alpha","background","paper","color","padding","borderRadius","shape","zIndex","boxShadow","shadows","minWidth","textAlign","border","display","fontWeight","lineHeight","fontSize","Alert","severity","my","gutterBottom","getQuizTitle","_currentChallengeDeta","replace","charAt","toUpperCase","secondary","textTransform","getQuizSubHeader","subHeaderParts","challengedByText","challenger_id","challengedUsername","challengerUsername","justifyContent","Button","onClick","size","startIcon","ReplayIcon","challenger_score","question","questionNumber","onOptionSelect","Paper","elevation","width","MarkdownRenderer","flexDirection","gap","options","option","isSelected","fullWidth","py","px","borderColor","getContrastText","darken","currentAccentColor","index","QuestionItem","random","_quizContext$subject","subjectAccentColors","alignItems","minHeight","CircularProgress","ml","maxWidth","margin","md","borderTop","QuizHeader","QuizQuestionList","disabled","questionsArray","warn","parsedOptions","formatDisplayTopicName","topicNameFromState","isChallenge","challengeDetails","name","match","p1","trim","split","word","part","year","randomIndex","currentIndex"],"sourceRoot":""}