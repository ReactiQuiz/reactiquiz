{"version":3,"file":"static/js/884.15b91fa6.chunk.js","mappings":"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","sources":["components/topics/TopicCard.js","components/quiz/QuizSettingsModal.js","utils/questionsPdfGenerator.js","components/quiz/QuestionsPdfModal.js","pages/SubjectTopicsPage.js","hooks/useSubjectTopics.js","utils/quizUtils.js"],"sourcesContent":["// src/components/topics/TopicCard.js\nimport { Card, CardContent, Typography, Button, useTheme, alpha, Chip, Box, CardActions, Stack } from '@mui/material';\nimport SchoolIcon from '@mui/icons-material/School';\nimport StyleIcon from '@mui/icons-material/Style';\nimport PrintIcon from '@mui/icons-material/Print'; // <-- Import new icon\nimport React from 'react'; // <-- Import React\n\nfunction TopicCard({ topic, onStartQuiz, onStudyFlashcards, onPrintQuestions, accentColor }) { // <-- Add onPrintQuestions prop\n  const theme = useTheme();\n  const { name, description, class: topicClass, genre: topicGenre } = topic;\n\n  const effectiveAccentColor = accentColor || theme.palette.primary.main;\n\n  const cardStyle = {\n    border: `1px solid ${alpha(effectiveAccentColor, 0.5)}`,\n    borderRadius: theme.shape.borderRadius * 2,\n    boxShadow: theme.shadows[2],\n    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n    '&:hover': {\n      transform: 'translateY(-4px)',\n      boxShadow: theme.shadows[6],\n    },\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    width: '100%'\n  };\n\n  return (\n    <Card sx={cardStyle}>\n      <CardContent sx={{ p: 2, flexGrow: 1 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1, flexWrap: 'wrap', gap: 0.5 }}>\n          <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 'bold', color: effectiveAccentColor, flexGrow: 1, fontSize: '1.1rem' }}>\n            {name}\n          </Typography>\n          <Box sx={{display: 'flex', gap: 0.5, alignItems: 'center', flexWrap: 'wrap'}}>\n            {topicClass && <Chip label={`Class ${topicClass}`} size=\"small\" sx={{ backgroundColor: alpha(theme.palette.info.dark, 0.3), color: theme.palette.info.light, fontSize: '0.7rem' }} />}\n            {topicGenre && <Chip label={topicGenre} size=\"small\" sx={{ backgroundColor: alpha(theme.palette.success.dark, 0.2), color: theme.palette.success.light, fontSize: '0.7rem' }} />}\n          </Box>\n        </Box>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1.5, minHeight: '3.2em', fontSize: '0.85rem' }}>\n          {description}\n        </Typography>\n      </CardContent>\n      <CardActions sx={{ p: 1.5, pt:0, alignSelf: 'stretch' }}>\n        <Stack direction=\"column\" spacing={1} sx={{width: '100%'}}>\n            <Stack direction=\"row\" spacing={1}>\n                {onStartQuiz && (\n                    <Button variant=\"outlined\" onClick={onStartQuiz} fullWidth startIcon={<SchoolIcon />}\n                        sx={{ borderColor: effectiveAccentColor, color: effectiveAccentColor, fontWeight: 'medium', py: 0.8, fontSize: '0.875rem', '&:hover': { backgroundColor: alpha(effectiveAccentColor, 0.1), borderColor: effectiveAccentColor } }}\n                    > Start Quiz </Button>\n                )}\n                {onStudyFlashcards && (\n                    <Button variant=\"outlined\" onClick={onStudyFlashcards} fullWidth startIcon={<StyleIcon />}\n                        sx={{ borderColor: alpha(effectiveAccentColor, 0.7), color: alpha(effectiveAccentColor, 0.9), fontWeight: 'medium', py: 0.8, fontSize: '0.875rem', '&:hover': { backgroundColor: alpha(effectiveAccentColor, 0.05), borderColor: effectiveAccentColor } }}\n                    > Flashcards </Button>\n                )}\n            </Stack>\n            {/* New Button for Printing */}\n            {onPrintQuestions && (\n                <Button variant=\"outlined\" onClick={onPrintQuestions} fullWidth startIcon={<PrintIcon />}\n                    sx={{ borderColor: alpha(theme.palette.grey[500], 0.5), color: theme.palette.text.secondary, fontWeight: 'medium', py: 0.8, fontSize: '0.875rem', '&:hover': { backgroundColor: alpha(theme.palette.grey[500], 0.1), borderColor: theme.palette.grey[500] } }}\n                > Print Questions </Button>\n            )}\n        </Stack>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default React.memo(TopicCard);","// src/components/QuizSettingsModal.js\nimport {\n  useState, useEffect\n} from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions, Button, FormControl, InputLabel, Select, MenuItem, TextField, useTheme, Typography\n} from '@mui/material';\nimport {\n  darken\n} from '@mui/material/styles';\n\n\nfunction QuizSettingsModal({ \n    open, \n    onClose, \n    onSubmit, \n    topicName, \n    accentColor,\n    isChallengeMode = false // New prop\n}) {\n  const theme = useTheme();\n  const [difficulty, setDifficulty] = useState('medium');\n  const [numQuestions, setNumQuestions] = useState(10);\n  const [numQuestionsError, setNumQuestionsError] = useState('');\n\n  const effectiveAccentColor = accentColor || theme.palette.primary.main;\n\n\n  useEffect(() => {\n    if (open) { // Only reset if the modal is actually being opened (not for nested always-open case)\n      setDifficulty('medium');\n      setNumQuestions(isChallengeMode ? 20 : 10); // Default 20 for challenge, 10 otherwise\n      setNumQuestionsError('');\n    }\n  }, [open, isChallengeMode]);\n\n  const handleNumQuestionsChange = (event) => {\n    const value = event.target.value;\n    const maxQs = isChallengeMode ? 50 : 50; // Max questions for challenge or regular quiz\n    if (value === '' || (/^\\d+$/.test(value) && Number(value) >= 1 && Number(value) <= maxQs)) {\n      setNumQuestions(value === '' ? '' : Number(value));\n      setNumQuestionsError('');\n    } else {\n      setNumQuestions(value);\n      if (value !== '' && (Number(value) < 1 || Number(value) > maxQs || !/^\\d+$/.test(value))) {\n        setNumQuestionsError(`Please enter a number between 1 and ${maxQs}.`);\n      } else {\n        setNumQuestionsError('');\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    const maxQs = isChallengeMode ? 50 : 50;\n    const finalNumQuestions = numQuestions === '' ? (isChallengeMode ? 20 : 10) : Number(numQuestions);\n    if (finalNumQuestions < 1 || finalNumQuestions > maxQs || isNaN(finalNumQuestions)) {\n      setNumQuestionsError(`Please enter a valid number between 1 and ${maxQs}.`);\n      return;\n    }\n    onSubmit({ difficulty, numQuestions: finalNumQuestions });\n    // onClose(); // Don't call onClose if it's nested and always \"open\"\n  };\n\n  // If this modal is used *inside* another dialog (like the challenge creation dialog),\n  // we might not want it to render its own Dialog container.\n  // However, for simplicity in this step, it still renders a Dialog.\n  // A more advanced solution might have this component return only its content,\n  // and the parent dialog handles the Dialog structure.\n\n  return (\n    // If it's challenge mode and meant to be *part* of another dialog,\n    // you might conditionally render <Dialog> or just the <DialogContent> and <DialogActions>\n    // For now, keeping it simple.\n    <Dialog open={open} onClose={onClose} PaperProps={{ sx: { minWidth: '300px', maxWidth: '500px' } }}>\n      <DialogTitle sx={{ backgroundColor: effectiveAccentColor, color: theme.palette.getContrastText(effectiveAccentColor), pb: 1.5, pt: 2 }}>\n        {isChallengeMode ? `Set Challenge Rules for ${topicName}` : `Quiz Settings: ${topicName}`}\n      </DialogTitle>\n      <DialogContent sx={{ pt: '20px !important', display: 'flex', flexDirection: 'column', gap: 2.5 }}>\n        {isChallengeMode && <Typography variant=\"body2\">Opponent will play with same settings.</Typography>}\n        <FormControl fullWidth>\n          <InputLabel id=\"difficulty-select-label\">Difficulty</InputLabel>\n          <Select\n            labelId=\"difficulty-select-label\"\n            id=\"difficulty-select\"\n            value={difficulty}\n            label=\"Difficulty\"\n            onChange={(e) => setDifficulty(e.target.value)}\n            MenuProps={{ PaperProps: { sx: { backgroundColor: theme.palette.background.paper } } }}\n          >\n            <MenuItem value=\"easy\">Easy</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"hard\">Hard</MenuItem>\n            <MenuItem value=\"mixed\">Mixed</MenuItem>\n          </Select>\n        </FormControl>\n        <TextField\n          fullWidth\n          label={`Number of Questions (1-${isChallengeMode ? 50 : 50})`}\n          type=\"number\"\n          value={numQuestions}\n          onChange={handleNumQuestionsChange}\n          inputProps={{ min: 1, max: (isChallengeMode ? 50 : 50), step: 1 }}\n          error={!!numQuestionsError}\n          helperText={numQuestionsError}\n        />\n      </DialogContent>\n      <DialogActions sx={{ p: '16px 24px' }}>\n        <Button onClick={onClose} sx={{ color: effectiveAccentColor }}>Cancel</Button>\n        <Button\n          onClick={handleSubmit}\n          variant=\"contained\"\n          sx={{\n            backgroundColor: effectiveAccentColor,\n            color: theme.palette.getContrastText(effectiveAccentColor),\n            '&:hover': { backgroundColor: darken(effectiveAccentColor, 0.2) }\n          }}\n          disabled={!!numQuestionsError || numQuestions === ''}\n        >\n          {isChallengeMode ? \"Send Challenge\" : \"Start Quiz\"}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default QuizSettingsModal;","// src/utils/questionsPdfGenerator.js\nimport { jsPDF } from 'jspdf';\nimport autoTable from 'jspdf-autotable'; // <-- Import the autoTable function\nimport apiClient from '../api/axiosInstance';\nimport { shuffleArray, parseQuestionOptions } from './quizUtils';\nimport { format } from 'date-fns';\n\n/**\n * Fetches questions based on topic and difficulty.\n */\nasync function fetchQuestionsForPdf(topicId, difficulty, numQuestions) {\n  try {\n    const response = await apiClient.get(`/api/questions?topicId=${topicId}`);\n    let allQuestions = parseQuestionOptions(response.data);\n\n    if (difficulty !== 'mixed') {\n      let minScore = 0, maxScore = Infinity;\n      if (difficulty === 'easy') { minScore = 10; maxScore = 13; }\n      else if (difficulty === 'medium') { minScore = 14; maxScore = 17; }\n      else if (difficulty === 'hard') { minScore = 18; maxScore = 20; }\n      const filtered = allQuestions.filter(q => q.difficulty >= minScore && q.difficulty <= maxScore);\n      if (filtered.length > 0) allQuestions = filtered;\n    }\n    return shuffleArray(allQuestions).slice(0, numQuestions);\n  } catch (error) {\n    console.error(\"Failed to fetch questions for PDF:\", error);\n    throw new Error(\"Could not fetch questions. Please check your connection and try again.\");\n  }\n}\n\n/**\n * Generates and downloads a PDF of quiz questions.\n */\nexport const generateQuestionsPdf = async (topic, settings) => {\n  try {\n    const questions = await fetchQuestionsForPdf(topic.id, settings.difficulty, settings.numQuestions);\n    if (questions.length === 0) {\n      alert(\"No questions found matching the selected criteria.\");\n      return;\n    }\n\n    const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });\n    const margin = 15;\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const contentWidth = pageWidth - 2 * margin;\n    let y = margin;\n    let answerKey = [];\n\n    // --- PDF Header ---\n    doc.setFontSize(20);\n    doc.setFont(undefined, 'bold');\n    doc.text(\"ReactiQuiz\", pageWidth / 2, y, { align: 'center' });\n    y += 10;\n    \n    doc.setFontSize(14);\n    doc.setFont(undefined, 'normal');\n    doc.text(`Topic: ${topic.name}`, margin, y);\n    y += 7;\n\n    const detailsText = `Difficulty: ${settings.difficulty.charAt(0).toUpperCase() + settings.difficulty.slice(1)} | Questions: ${questions.length} | Class: ${topic.class || 'N/A'}`;\n    doc.text(detailsText, margin, y);\n    y += 7;\n\n    doc.setFontSize(10);\n    doc.setTextColor(150);\n    doc.text(`Generated on: ${format(new Date(), 'MMM d, yyyy HH:mm')}`, margin, y);\n    y += 10;\n    doc.setDrawColor(200);\n    doc.line(margin, y, pageWidth - margin, y);\n    y += 10;\n\n    // --- Questions Section ---\n    questions.forEach((q, index) => {\n      const questionTextLines = doc.splitTextToSize(`Q${index + 1}. ${q.text}`, contentWidth);\n      const optionsHeight = (q.options.length * 7) + 5;\n      const questionBlockHeight = (questionTextLines.length * settings.fontSize * 0.35) + optionsHeight;\n\n      if (y + questionBlockHeight > pageHeight - margin) {\n        doc.addPage();\n        y = margin;\n      }\n\n      doc.setFontSize(settings.fontSize);\n      doc.setTextColor(0);\n      doc.setFont(undefined, 'bold');\n      doc.text(questionTextLines, margin, y);\n      y += (questionTextLines.length * settings.fontSize * 0.35) + 2;\n\n      doc.setFont(undefined, 'normal');\n      q.options.forEach(opt => {\n        doc.text(`   (${opt.id}) ${opt.text}`, margin + 5, y);\n        y += 7;\n      });\n\n      const correctAnswer = q.options.find(opt => opt.id === q.correctOptionId);\n      if (settings.includeAnswers && !settings.answersAtEnd) {\n        doc.setFontSize(settings.fontSize - 2);\n        doc.setTextColor(0, 100, 0);\n        doc.text(`Answer: (${correctAnswer.id}) ${correctAnswer.text}`, margin + 5, y);\n        y += 5;\n        if (settings.includeExplanations && q.explanation) {\n            doc.setTextColor(100);\n            const explanationLines = doc.splitTextToSize(`Explanation: ${q.explanation}`, contentWidth - 5);\n            doc.text(explanationLines, margin + 5, y);\n            y += (explanationLines.length * (settings.fontSize - 2) * 0.35) + 3;\n        }\n      }\n      if (correctAnswer) {\n        answerKey.push({ q: `Q${index + 1}`, ans: `(${correctAnswer.id}) ${correctAnswer.text}` });\n      } else {\n        answerKey.push({ q: `Q${index + 1}`, ans: `Answer not found.` });\n      }\n      y += 5;\n    });\n\n    // --- Answer Key Section (if at end) ---\n    if (settings.includeAnswers && settings.answersAtEnd) {\n        if (y + 20 > pageHeight - margin) { doc.addPage(); y = margin; }\n        else { y += 10; }\n        \n        doc.setFontSize(16); doc.setFont(undefined, 'bold'); doc.setTextColor(0);\n        doc.text(\"Answer Key\", margin, y);\n        \n        // --- FIX IS HERE ---\n        // Apply the autoTable plugin to the jsPDF instance\n        autoTable(doc, {\n            startY: y + 8,\n            head: [['Question', 'Correct Answer']],\n            body: answerKey.map(item => [item.q, item.ans]),\n            theme: 'grid',\n            headStyles: { fillColor: [41, 128, 185], textColor: 255 },\n            styles: { fontSize: settings.fontSize - 2 }\n        });\n    }\n\n    doc.save(`ReactiQuiz_${topic.name.replace(/\\s/g, '_')}.pdf`);\n  } catch (error) {\n    alert(error.message);\n  }\n};","// src/components/quiz/QuestionsPdfModal.js\nimport { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions, Button, FormControl, InputLabel, Select,\n  MenuItem, TextField, useTheme, Typography, FormGroup, FormControlLabel, Checkbox, Divider, Box, CircularProgress\n} from '@mui/material';\nimport { darken } from '@mui/material/styles';\nimport { generateQuestionsPdf } from '../../utils/questionsPdfGenerator';\n\nfunction QuestionsPdfModal({ open, onClose, topic, accentColor }) {\n  const theme = useTheme();\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [settings, setSettings] = useState({\n    difficulty: 'medium',\n    numQuestions: 20,\n    fontSize: 12,\n    includeAnswers: true,\n    includeExplanations: false,\n    answersAtEnd: true,\n  });\n\n  const [numError, setNumError] = useState('');\n  const effectiveAccentColor = accentColor || theme.palette.primary.main;\n\n  const handleChange = (event) => {\n    const { name, value, type, checked } = event.target;\n    setSettings(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleNumChange = (e) => {\n    const value = e.target.value;\n    if (value > 100 || value < 1) {\n      setNumError(\"Enter a number between 1 and 100.\");\n    } else {\n      setNumError(\"\");\n    }\n    setSettings(prev => ({ ...prev, numQuestions: value }));\n  };\n\n  const handleGenerateClick = async () => {\n    if (numError) return;\n    setIsGenerating(true);\n    await generateQuestionsPdf(topic, settings);\n    setIsGenerating(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} PaperProps={{ sx: { minWidth: '320px', maxWidth: '500px' } }}>\n      <DialogTitle sx={{ backgroundColor: effectiveAccentColor, color: theme.palette.getContrastText(effectiveAccentColor), pb: 1.5, pt: 2 }}>\n        Print Questions for: {topic.name}\n      </DialogTitle>\n      <DialogContent sx={{ pt: '20px !important', display: 'flex', flexDirection: 'column', gap: 2.5 }}>\n        <Typography variant=\"body2\">Configure the question set for your PDF document.</Typography>\n        <FormControl fullWidth>\n          <InputLabel>Difficulty</InputLabel>\n          <Select name=\"difficulty\" value={settings.difficulty} label=\"Difficulty\" onChange={handleChange}>\n            <MenuItem value=\"easy\">Easy</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"hard\">Hard</MenuItem>\n            <MenuItem value=\"mixed\">Mixed</MenuItem>\n          </Select>\n        </FormControl>\n        <TextField\n          name=\"numQuestions\" label=\"Number of Questions\" type=\"number\" value={settings.numQuestions}\n          onChange={handleNumChange} error={!!numError} helperText={numError}\n          inputProps={{ min: 1, max: 100, step: 1 }}\n        />\n        <TextField\n          name=\"fontSize\" label=\"Font Size\" type=\"number\" value={settings.fontSize}\n          onChange={handleChange} inputProps={{ min: 8, max: 16, step: 1 }}\n        />\n        <Divider />\n        <FormGroup>\n          <FormControlLabel control={<Checkbox checked={settings.includeAnswers} onChange={handleChange} name=\"includeAnswers\" />} label=\"Include Answers\" />\n          {settings.includeAnswers && (\n            <Box sx={{ pl: 3 }}>\n              <FormControlLabel control={<Checkbox checked={settings.includeExplanations} onChange={handleChange} name=\"includeExplanations\" />} label=\"Include Explanations\" />\n              <FormControlLabel control={<Checkbox checked={settings.answersAtEnd} onChange={handleChange} name=\"answersAtEnd\" />} label=\"Print Answer Key at the End\" />\n            </Box>\n          )}\n        </FormGroup>\n      </DialogContent>\n      <DialogActions sx={{ p: '16px 24px' }}>\n        <Button onClick={onClose} sx={{ color: effectiveAccentColor }}>Cancel</Button>\n        <Button\n          onClick={handleGenerateClick}\n          variant=\"contained\"\n          disabled={isGenerating || !!numError}\n          sx={{ backgroundColor: effectiveAccentColor, '&:hover': { backgroundColor: darken(effectiveAccentColor, 0.2) } }}\n        >\n          {isGenerating ? <CircularProgress size={24} color=\"inherit\" /> : 'Generate PDF'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default QuestionsPdfModal;","// src/pages/SubjectTopicsPage.js\nimport { Box, Typography, TextField, FormControl, InputLabel, Select, MenuItem, CircularProgress, Alert, Breadcrumbs, Link as MuiLink, Grid, InputAdornment } from '@mui/material';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useTheme } from '@mui/material/styles';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { useSubjectTopics } from '../hooks/useSubjectTopics';\nimport TopicCard from '../components/topics/TopicCard';\nimport QuizSettingsModal from '../components/quiz/QuizSettingsModal';\nimport QuestionsPdfModal from '../components/quiz/QuestionsPdfModal';\n\nfunction SubjectTopicsPage() {\n  const theme = useTheme();\n\n  // Get all state and logic from the custom hook\n  const {\n    subjectKey,\n    currentSubject,\n    topics,\n    isLoading,\n    error,\n    modalOpen,\n    selectedTopicForQuiz,\n    pdfModalOpen,\n    selectedTopicForPdf,\n    searchTerm,\n    setSearchTerm,\n    selectedClass,\n    setSelectedClass,\n    selectedGenre,\n    setSelectedGenre,\n    availableClasses,\n    availableGenres,\n    filteredTopics,\n    handleOpenQuizModal,\n    handleCloseQuizModal,\n    handleStartQuizWithSettings,\n    handleStudyFlashcards,\n    handleOpenPdfModal,\n    handleClosePdfModal\n  } = useSubjectTopics();\n\n  const accentColor = currentSubject?.accentColor || theme.palette.primary.main;\n  const subjectDisplayName = currentSubject?.name || (subjectKey ? subjectKey.charAt(0).toUpperCase() + subjectKey.slice(1) : '');\n\n  // --- Render Logic ---\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"70vh\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Loading topics for {subjectKey}...</Typography>\n      </Box>\n    );\n  }\n\n  if (error || !currentSubject) {\n    return (\n      <Box sx={{ p: 3, maxWidth: '900px', margin: 'auto', textAlign: 'center' }}>\n        <Alert severity=\"error\">{error || `Subject \"${subjectKey}\" could not be found.`}</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: { xs: 1, sm: 2, md: 3 } }}>\n      <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\" sx={{ mb: 2 }}>\n        <MuiLink component={RouterLink} underline=\"hover\" color=\"inherit\" to=\"/subjects\">\n          Subjects\n        </MuiLink>\n        <Typography color={accentColor} sx={{ fontWeight: 'medium' }}>{subjectDisplayName}</Typography>\n      </Breadcrumbs>\n      <Grid container sx={{ mb: { xs: 2, sm: 3, md: 4 }, mt: { xs: 1, sm: 1 } }} alignItems=\"flex-end\">\n        <Grid item sx={{\n          width: {\n            xs: '100%',\n            sm: '100%',\n            md: '50%',\n            lg: '50%',\n            xl: '50%'\n          }\n        }}>\n          <TextField\n            fullWidth\n            label=\"Search Topics\"\n            variant=\"outlined\"\n            value={searchTerm}\n            placeholder=\"Enter topic name or keyword...\"\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Grid>\n        {availableClasses.length > 0 && (\n          <Grid item\n            sx={{\n              width: {\n                xs: '100%',\n                sm: '50%',\n                md: '25%',\n                lg: '25%',\n                xl: '25%'\n              }\n            }}\n          >\n            <FormControl fullWidth variant=\"outlined\">\n              <InputLabel id=\"class-select-label-dynamic\">Filter by Class/Level</InputLabel>\n              <Select\n                labelId=\"class-select-label-dynamic\"\n                value={selectedClass}\n                label=\"Filter by Class/Level\"\n                onChange={(e) => setSelectedClass(e.target.value)}\n              >\n                <MenuItem value=\"\">\n                  <em>All Levels</em>\n                </MenuItem>\n                {availableClasses.map((cls) => (\n                  <MenuItem key={cls} value={cls}>\n                    {cls.includes('th') || cls.includes('st') || cls.includes('nd') || cls.includes('rd') ? `Class ${cls}` : cls}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        )}\n        {availableGenres.length > 0 && (\n          <Grid item\n            sx={{\n              width: {\n                xs: '100%',\n                sm: '50%',\n                md: '25%',\n                lg: '25%',\n                xl: '25%'\n              }\n            }}\n          >\n            <FormControl fullWidth variant=\"outlined\">\n              <InputLabel id=\"genre-select-label-dynamic\">Filter by Genre</InputLabel>\n              <Select\n                labelId=\"genre-select-label-dynamic\"\n                value={selectedGenre}\n                label=\"Filter by Genre\"\n                onChange={(e) => setSelectedGenre(e.target.value)}\n              >\n                <MenuItem value=\"\">\n                  <em>All Genres</em>\n                </MenuItem>\n                {availableGenres.map((genre) => (\n                  <MenuItem key={genre} value={genre}>\n                    {genre}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        )}\n      </Grid>\n\n      {\n        !isLoading && topics.length > 0 && filteredTopics.length === 0 && (searchTerm || selectedClass || selectedGenre) && (\n          <Alert severity=\"info\" sx={{ my: 2 }}>No topics found for {subjectDisplayName} matching your current filters.</Alert>\n        )\n      }\n      {\n        !isLoading && topics.length === 0 && !error && (\n          <Alert severity=\"info\" sx={{ my: 2 }}>No topics are currently available for {subjectDisplayName}.</Alert>\n        )\n      }\n\n      <Grid container justifyContent=\"center\">\n        {filteredTopics.map((topic) => (\n          <Grid item xs={12} sm={6} md={4} lg={3} key={topic.id} sx={{\n            display: 'flex',\n            width: {\n              xs: '100%',\n              sm: '49.5%',\n              md: '24.5%',\n              lg: '24.5%',\n              xl: '24.5%'\n            },\n            mb: {\n              xs: '0.5%',\n              sm: '0.5%',\n              md: '0.5%',\n              lg: '0.5%',\n              xl: '0.5%',\n            }\n          }}>\n            <TopicCard\n              topic={topic}\n              onStartQuiz={() => handleOpenQuizModal(topic)}\n              onStudyFlashcards={() => handleStudyFlashcards(topic)}\n              onPrintQuestions={() => handleOpenPdfModal(topic)}\n              accentColor={accentColor}\n            />\n            <Grid sx={{\n              width: {\n                xs: '0%',\n                sm: '1%',\n                md: '2%',\n                lg: '2%',\n                xl: '2%',\n              }\n            }}>\n            </Grid>\n          </Grid>\n        ))}\n      </Grid>\n\n      {selectedTopicForQuiz && (\n        <QuizSettingsModal\n          open={modalOpen}\n          onClose={handleCloseQuizModal}\n          onSubmit={handleStartQuizWithSettings}\n          topicName={selectedTopicForQuiz.name}\n          accentColor={accentColor}\n        />\n      )}\n      \n      {selectedTopicForPdf && (\n        <QuestionsPdfModal\n          open={pdfModalOpen}\n          onClose={handleClosePdfModal}\n          topic={selectedTopicForPdf}\n          accentColor={accentColor}\n        />\n      )}\n    </Box >\n  );\n}\n\nexport default SubjectTopicsPage;","// src/hooks/useSubjectTopics.js\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport apiClient from '../api/axiosInstance';\n\n/**\n * A custom hook to manage all state and logic for the SubjectTopicsPage.\n * It handles fetching data for a specific subject and its topics,\n * and manages all filtering and modal interactions.\n */\nexport const useSubjectTopics = () => {\n  const { subjectKey } = useParams();\n  const navigate = useNavigate();\n\n  // --- State for Data Fetching ---\n  const [currentSubject, setCurrentSubject] = useState(null);\n  const [topics, setTopics] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // --- State for Filtering ---\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState('');\n\n  // --- State for Modals ---\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedTopicForQuiz, setSelectedTopicForQuiz] = useState(null);\n  const [pdfModalOpen, setPdfModalOpen] = useState(false);\n  const [selectedTopicForPdf, setSelectedTopicForPdf] = useState(null);\n\n  // --- Data Fetching Logic ---\n  const fetchSubjectData = useCallback(async () => {\n    if (!subjectKey) {\n      setError('Subject key is missing from URL.');\n      setIsLoading(false);\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n    setSearchTerm('');\n    setSelectedClass('');\n    setSelectedGenre('');\n\n    try {\n      const [subjectsResponse, topicsResponse] = await Promise.all([\n        apiClient.get('/api/subjects'),\n        apiClient.get(`/api/topics/${subjectKey}`)\n      ]);\n\n      if (!Array.isArray(subjectsResponse.data)) throw new Error('Invalid subjects data format.');\n      const foundSubject = subjectsResponse.data.find(s => s.subjectKey.toLowerCase() === subjectKey.toLowerCase());\n      if (!foundSubject) throw new Error(`Subject '${subjectKey}' not found.`);\n      \n      if (!Array.isArray(topicsResponse.data)) throw new Error(`Invalid topic data received for ${foundSubject.name}.`);\n\n      setCurrentSubject(foundSubject);\n      setTopics(topicsResponse.data);\n    } catch (err) {\n      console.error(`Error fetching data for subject ${subjectKey}:`, err);\n      setError(`Failed to load data: ${err.message}`);\n      setCurrentSubject(null);\n      setTopics([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [subjectKey]);\n\n  useEffect(() => {\n    fetchSubjectData();\n  }, [fetchSubjectData]);\n\n\n  // --- Memoized Derived State for Filtering ---\n  const availableClasses = useMemo(() => {\n    const allClasses = topics.map(topic => topic.class).filter(Boolean);\n    return [...new Set(allClasses)].sort((a, b) => parseInt(a) - parseInt(b) || a.localeCompare(b));\n  }, [topics]);\n\n  const availableGenres = useMemo(() => {\n    const allGenres = topics.map(topic => topic.genre).filter(Boolean);\n    return [...new Set(allGenres)].sort();\n  }, [topics]);\n\n  const filteredTopics = useMemo(() => {\n    return topics.filter(topic => {\n      const classMatch = !selectedClass || topic.class === selectedClass;\n      const genreMatch = !selectedGenre || topic.genre === selectedGenre;\n      const searchMatch = !searchTerm || \n        topic.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (topic.description && topic.description.toLowerCase().includes(searchTerm.toLowerCase()));\n      return classMatch && genreMatch && searchMatch;\n    });\n  }, [topics, selectedClass, selectedGenre, searchTerm]);\n\n\n  // --- Event Handlers ---\n  const handleOpenQuizModal = (topic) => { setSelectedTopicForQuiz(topic); setModalOpen(true); };\n  const handleCloseQuizModal = () => { setModalOpen(false); setSelectedTopicForQuiz(null); };\n  \n  const handleStartQuizWithSettings = (settings) => {\n    if (selectedTopicForQuiz && currentSubject) {\n      navigate(`/quiz/${selectedTopicForQuiz.id}`, { \n        state: { \n          difficulty: settings.difficulty, \n          numQuestions: settings.numQuestions, \n          topicName: selectedTopicForQuiz.name, \n          accentColor: currentSubject.accentColor, \n          subject: currentSubject.subjectKey, \n          quizClass: selectedTopicForQuiz.class \n        } \n      });\n    }\n    handleCloseQuizModal();\n  };\n\n  const handleStudyFlashcards = (topic) => {\n    if (currentSubject) {\n      navigate(`/flashcards/${topic.id}`, { \n        state: { \n          topicName: topic.name, \n          accentColor: currentSubject.accentColor, \n          subject: currentSubject.subjectKey, \n          quizClass: topic.class \n        } \n      });\n    }\n  };\n\n  const handleOpenPdfModal = (topic) => {\n    setSelectedTopicForPdf(topic);\n    setPdfModalOpen(true);\n  };\n  \n  const handleClosePdfModal = () => {\n    setSelectedTopicForPdf(null);\n    setPdfModalOpen(false);\n  };\n\n  return {\n    subjectKey,\n    currentSubject,\n    topics,\n    isLoading,\n    error,\n    modalOpen,\n    selectedTopicForQuiz,\n    pdfModalOpen,\n    selectedTopicForPdf,\n    searchTerm,\n    setSearchTerm,\n    selectedClass,\n    setSelectedClass,\n    selectedGenre,\n    setSelectedGenre,\n    availableClasses,\n    availableGenres,\n    filteredTopics,\n    handleOpenQuizModal,\n    handleCloseQuizModal,\n    handleStartQuizWithSettings,\n    handleStudyFlashcards,\n    handleOpenPdfModal,\n    handleClosePdfModal,\n  };\n};","// src/utils/quizUtils.js\n\n/**\n * Parses the 'options' field of question objects within an array.\n * If 'options' is a JSON string, it's parsed into an array.\n * If it's already an array, it's returned as is.\n * Handles potential parsing errors.\n * @param {Array<Object>} questionsArray - An array of question objects.\n * @returns {Array<Object>} The array of question objects with 'options' as arrays.\n */\nexport const parseQuestionOptions = (questionsArray) => {\n  if (!Array.isArray(questionsArray)) {\n    console.warn(\"[quizUtils] parseQuestionOptions received non-array input:\", questionsArray);\n    return [];\n  }\n  return questionsArray.map(q => {\n    if (!q || typeof q !== 'object') {\n        console.warn(\"[quizUtils] Encountered invalid item in questionsArray:\", q);\n        return q;\n    }\n    let parsedOptions = [];\n    if (typeof q.options === 'string') {\n      try {\n        parsedOptions = JSON.parse(q.options);\n        if (!Array.isArray(parsedOptions)) {\n            console.warn(`[quizUtils] Parsed options for Q ID ${q.id} is not an array:`, parsedOptions);\n            parsedOptions = [];\n        }\n      } catch (e) {\n        console.error(`[quizUtils] Failed to parse options for question ID ${q.id}:`, q.options, e);\n      }\n    } else if (Array.isArray(q.options)) {\n      parsedOptions = q.options;\n    } else if (q.options !== undefined && q.options !== null) {\n      console.warn(`[quizUtils] Question ID ${q.id} has unexpected options format (not string or array):`, q.options);\n    }\n    return { ...q, options: parsedOptions };\n  });\n};\n\n/**\n * Formats a topic name for display based on its ID and other optional details.\n * @param {string} topicId - The ID of the topic.\n * @param {string|null} topicNameFromState - A pre-formatted name, if available.\n * @param {boolean} isChallenge - Whether this is for a challenge result.\n * @param {Object|null} challengeDetails - Details of the challenge, if applicable.\n * @returns {string} The formatted topic name.\n */\nexport const formatDisplayTopicName = (topicId, topicNameFromState = null, isChallenge = false, challengeDetails = null) => {\n  // ... (your existing formatDisplayTopicName logic from previous step)\n  if (isChallenge && challengeDetails?.topic_name) return `Challenge: ${challengeDetails.topic_name}`;\n  if (isChallenge && topicNameFromState) return `Challenge: ${topicNameFromState}`;\n  if (isChallenge) return `Challenge: ${topicId ? String(topicId).replace(/-/g, ' ') : 'Quiz'}`;\n  if (topicNameFromState && topicId && topicNameFromState !== String(topicId).replace(/-/g, ' ')) { return topicNameFromState; }\n  if (!topicId) return 'N/A';\n  let name = String(topicId).replace(/-/g, ' ');\n  name = name.replace(/^homibhabha practice /i, 'Homi Bhabha Practice - ');\n  name = name.replace(/^pyq /i, 'PYQ ');\n  const classSuffixRegex = /\\s(\\d+(?:st|nd|rd|th))$/i;\n  name = name.replace(classSuffixRegex, (match, p1) => ` - Class ${p1.toUpperCase()}`).trim();\n  name = name.split(' ').map(word => {\n    if (word.toLowerCase() === 'class' || word.toLowerCase() === 'std') return word;\n    if (word.includes('-')) { return word.split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()).join('-'); }\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); }).join(' ');\n  name = name.replace(/Homi Bhabha Practice - (\\w+) (\\w+)/i, (match, quizClass, difficulty) => `Homi Bhabha Practice - Std ${quizClass} (${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)})`);\n  name = name.replace(/Pyq (\\w+) (\\d+)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  name = name.replace(/Pyq - Class (\\w+) \\((\\d+)\\)/i, (match, quizClass, year) => `PYQ - Std ${quizClass} (${year})`);\n  return name;\n};\n\n/**\n * Shuffles an array in place using the Fisher-Yates algorithm.\n * @param {Array} array - The array to shuffle.\n * @returns {Array} The shuffled array (same instance, modified in place, but also returned).\n */\nexport const shuffleArray = (array) => {\n  if (!array || !Array.isArray(array)) return [];\n  let currentIndex = array.length, randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex !== 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n  return array; // Returns the same array instance, now shuffled\n};"],"names":["TopicCard","_ref","topic","onStartQuiz","onStudyFlashcards","onPrintQuestions","accentColor","theme","useTheme","name","description","class","topicClass","genre","topicGenre","effectiveAccentColor","palette","primary","main","cardStyle","border","concat","alpha","borderRadius","shape","boxShadow","shadows","transition","transform","display","flexDirection","height","width","_jsxs","Card","sx","children","CardContent","p","flexGrow","Box","justifyContent","alignItems","mb","flexWrap","gap","_jsx","Typography","variant","component","fontWeight","color","fontSize","Chip","label","size","backgroundColor","info","dark","light","success","minHeight","CardActions","pt","alignSelf","Stack","direction","spacing","Button","onClick","fullWidth","startIcon","SchoolIcon","borderColor","py","StyleIcon","PrintIcon","grey","text","secondary","React","open","onClose","onSubmit","topicName","isChallengeMode","difficulty","setDifficulty","useState","numQuestions","setNumQuestions","numQuestionsError","setNumQuestionsError","useEffect","Dialog","PaperProps","minWidth","maxWidth","DialogTitle","getContrastText","pb","DialogContent","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","MenuProps","background","paper","MenuItem","TextField","type","event","test","Number","inputProps","min","max","step","error","helperText","DialogActions","handleSubmit","finalNumQuestions","isNaN","darken","disabled","generateQuestionsPdf","async","settings","questions","topicId","response","apiClient","get","allQuestions","parseQuestionOptions","data","minScore","maxScore","Infinity","filtered","filter","q","length","shuffleArray","slice","console","Error","fetchQuestionsForPdf","alert","doc","jsPDF","orientation","unit","format","margin","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","contentWidth","y","answerKey","setFontSize","setFont","undefined","align","detailsText","charAt","toUpperCase","setTextColor","Date","setDrawColor","line","forEach","index","questionTextLines","splitTextToSize","optionsHeight","options","questionBlockHeight","addPage","opt","correctAnswer","find","correctOptionId","includeAnswers","answersAtEnd","includeExplanations","explanation","explanationLines","push","ans","autoTable","startY","head","body","map","item","headStyles","fillColor","textColor","styles","save","replace","message","isGenerating","setIsGenerating","setSettings","numError","setNumError","handleChange","checked","prev","_objectSpread","Divider","FormGroup","FormControlLabel","control","Checkbox","pl","CircularProgress","subjectKey","currentSubject","topics","isLoading","modalOpen","selectedTopicForQuiz","pdfModalOpen","selectedTopicForPdf","searchTerm","setSearchTerm","selectedClass","setSelectedClass","selectedGenre","setSelectedGenre","availableClasses","availableGenres","filteredTopics","handleOpenQuizModal","handleCloseQuizModal","handleStartQuizWithSettings","handleStudyFlashcards","handleOpenPdfModal","handleClosePdfModal","useSubjectTopics","useParams","navigate","useNavigate","setCurrentSubject","setTopics","setIsLoading","setError","setModalOpen","setSelectedTopicForQuiz","setPdfModalOpen","setSelectedTopicForPdf","fetchSubjectData","useCallback","subjectsResponse","topicsResponse","Promise","all","Array","isArray","foundSubject","s","toLowerCase","err","useMemo","allClasses","Boolean","Set","sort","a","b","parseInt","localeCompare","allGenres","classMatch","genreMatch","searchMatch","includes","state","subject","quizClass","subjectDisplayName","ml","textAlign","Alert","severity","xs","sm","md","Breadcrumbs","separator","NavigateNextIcon","MuiLink","RouterLink","underline","to","Grid","container","mt","lg","xl","placeholder","InputProps","startAdornment","InputAdornment","position","SearchIcon","cls","my","QuizSettingsModal","QuestionsPdfModal","questionsArray","warn","parsedOptions","JSON","parse","formatDisplayTopicName","topicNameFromState","arguments","isChallenge","challengeDetails","topic_name","String","match","p1","trim","split","word","part","join","year","array","randomIndex","currentIndex","Math","floor","random"],"sourceRoot":""}